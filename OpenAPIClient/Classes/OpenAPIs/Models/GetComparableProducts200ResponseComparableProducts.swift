//
// GetComparableProducts200ResponseComparableProducts.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GetComparableProducts200ResponseComparableProducts: Codable, JSONEncodable, Hashable {

    public var calories: [AnyCodable]
    public var likes: [AnyCodable]
    public var price: [AnyCodable]
    public var protein: Set<GetComparableProducts200ResponseComparableProductsProteinInner>
    public var spoonacularScore: Set<GetComparableProducts200ResponseComparableProductsProteinInner>
    public var sugar: [AnyCodable]

    public init(calories: [AnyCodable], likes: [AnyCodable], price: [AnyCodable], protein: Set<GetComparableProducts200ResponseComparableProductsProteinInner>, spoonacularScore: Set<GetComparableProducts200ResponseComparableProductsProteinInner>, sugar: [AnyCodable]) {
        self.calories = calories
        self.likes = likes
        self.price = price
        self.protein = protein
        self.spoonacularScore = spoonacularScore
        self.sugar = sugar
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case calories
        case likes
        case price
        case protein
        case spoonacularScore
        case sugar
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(calories, forKey: .calories)
        try container.encode(likes, forKey: .likes)
        try container.encode(price, forKey: .price)
        try container.encode(protein, forKey: .protein)
        try container.encode(spoonacularScore, forKey: .spoonacularScore)
        try container.encode(sugar, forKey: .sugar)
    }
}

