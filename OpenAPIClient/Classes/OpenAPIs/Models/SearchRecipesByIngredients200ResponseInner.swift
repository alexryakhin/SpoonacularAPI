//
// SearchRecipesByIngredients200ResponseInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SearchRecipesByIngredients200ResponseInner: Codable, JSONEncodable, Hashable {

    static let imageRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let imageTypeRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let titleRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var id: Int
    public var image: String
    public var imageType: String
    public var likes: Int
    public var missedIngredientCount: Int
    public var missedIngredients: Set<SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner>
    public var title: String
    public var unusedIngredients: [AnyCodable]
    public var usedIngredientCount: Double
    public var usedIngredients: Set<SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner>

    public init(id: Int, image: String, imageType: String, likes: Int, missedIngredientCount: Int, missedIngredients: Set<SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner>, title: String, unusedIngredients: [AnyCodable], usedIngredientCount: Double, usedIngredients: Set<SearchRecipesByIngredients200ResponseInnerMissedIngredientsInner>) {
        self.id = id
        self.image = image
        self.imageType = imageType
        self.likes = likes
        self.missedIngredientCount = missedIngredientCount
        self.missedIngredients = missedIngredients
        self.title = title
        self.unusedIngredients = unusedIngredients
        self.usedIngredientCount = usedIngredientCount
        self.usedIngredients = usedIngredients
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case image
        case imageType
        case likes
        case missedIngredientCount
        case missedIngredients
        case title
        case unusedIngredients
        case usedIngredientCount
        case usedIngredients
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(image, forKey: .image)
        try container.encode(imageType, forKey: .imageType)
        try container.encode(likes, forKey: .likes)
        try container.encode(missedIngredientCount, forKey: .missedIngredientCount)
        try container.encode(missedIngredients, forKey: .missedIngredients)
        try container.encode(title, forKey: .title)
        try container.encode(unusedIngredients, forKey: .unusedIngredients)
        try container.encode(usedIngredientCount, forKey: .usedIngredientCount)
        try container.encode(usedIngredients, forKey: .usedIngredients)
    }
}

