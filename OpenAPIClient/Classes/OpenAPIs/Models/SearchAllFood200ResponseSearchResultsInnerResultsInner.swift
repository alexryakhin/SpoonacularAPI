//
// SearchAllFood200ResponseSearchResultsInnerResultsInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SearchAllFood200ResponseSearchResultsInnerResultsInner: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let imageRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let linkRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let typeRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let contentRule = StringRule(minLength: 0, maxLength: nil, pattern: nil)
    public var id: String
    public var name: String
    public var image: String?
    public var link: String?
    public var type: String
    public var relevance: Double
    public var content: String?

    public init(id: String, name: String, image: String?, link: String?, type: String, relevance: Double, content: String?) {
        self.id = id
        self.name = name
        self.image = image
        self.link = link
        self.type = type
        self.relevance = relevance
        self.content = content
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case image
        case link
        case type
        case relevance
        case content
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encode(image, forKey: .image)
        try container.encode(link, forKey: .link)
        try container.encode(type, forKey: .type)
        try container.encode(relevance, forKey: .relevance)
        try container.encode(content, forKey: .content)
    }
}

