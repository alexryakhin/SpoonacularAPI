//
// ParseIngredients200ResponseInnerNutrition.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ParseIngredients200ResponseInnerNutrition: Codable, JSONEncodable, Hashable {

    public var nutrients: Set<ParseIngredients200ResponseInnerNutritionNutrientsInner>
    public var properties: Set<ParseIngredients200ResponseInnerNutritionPropertiesInner>
    public var flavonoids: Set<ParseIngredients200ResponseInnerNutritionPropertiesInner>
    public var caloricBreakdown: ParseIngredients200ResponseInnerNutritionCaloricBreakdown
    public var weightPerServing: ParseIngredients200ResponseInnerNutritionWeightPerServing

    public init(nutrients: Set<ParseIngredients200ResponseInnerNutritionNutrientsInner>, properties: Set<ParseIngredients200ResponseInnerNutritionPropertiesInner>, flavonoids: Set<ParseIngredients200ResponseInnerNutritionPropertiesInner>, caloricBreakdown: ParseIngredients200ResponseInnerNutritionCaloricBreakdown, weightPerServing: ParseIngredients200ResponseInnerNutritionWeightPerServing) {
        self.nutrients = nutrients
        self.properties = properties
        self.flavonoids = flavonoids
        self.caloricBreakdown = caloricBreakdown
        self.weightPerServing = weightPerServing
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case nutrients
        case properties
        case flavonoids
        case caloricBreakdown
        case weightPerServing
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(nutrients, forKey: .nutrients)
        try container.encode(properties, forKey: .properties)
        try container.encode(flavonoids, forKey: .flavonoids)
        try container.encode(caloricBreakdown, forKey: .caloricBreakdown)
        try container.encode(weightPerServing, forKey: .weightPerServing)
    }
}

