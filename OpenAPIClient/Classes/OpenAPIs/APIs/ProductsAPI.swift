//
// ProductsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ProductsAPI {

    /**
     Autocomplete Product Search
     
     - parameter query: (query) The (partial) search query. 
     - parameter number: (query) The number of results to return (between 1 and 25). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func autocompleteProductSearch(query: String, number: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AutocompleteProductSearch200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return autocompleteProductSearchWithRequestBuilder(query: query, number: number).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Autocomplete Product Search
     - GET /food/products/suggest
     - Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Autocomplete-Product-Search
}
     - parameter query: (query) The (partial) search query. 
     - parameter number: (query) The number of results to return (between 1 and 25). (optional)
     - returns: RequestBuilder<AutocompleteProductSearch200Response> 
     */
    open class func autocompleteProductSearchWithRequestBuilder(query: String, number: Int? = nil) -> RequestBuilder<AutocompleteProductSearch200Response> {
        let localVariablePath = "/food/products/suggest"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": (wrappedValue: query.encodeToJSON(), isExplode: false),
            "number": (wrappedValue: number?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AutocompleteProductSearch200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter locale
     */
    public enum Locale_classifyGroceryProduct: String, CaseIterable {
        case us = "en_US"
        case gb = "en_GB"
    }

    /**
     Classify Grocery Product
     
     - parameter classifyGroceryProductRequest: (body)  
     - parameter locale: (query) The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func classifyGroceryProduct(classifyGroceryProductRequest: ClassifyGroceryProductRequest, locale: Locale_classifyGroceryProduct? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ClassifyGroceryProduct200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return classifyGroceryProductWithRequestBuilder(classifyGroceryProductRequest: classifyGroceryProductRequest, locale: locale).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Classify Grocery Product
     - POST /food/products/classify
     - This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Classify-Grocery-Product
}
     - parameter classifyGroceryProductRequest: (body)  
     - parameter locale: (query) The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
     - returns: RequestBuilder<ClassifyGroceryProduct200Response> 
     */
    open class func classifyGroceryProductWithRequestBuilder(classifyGroceryProductRequest: ClassifyGroceryProductRequest, locale: Locale_classifyGroceryProduct? = nil) -> RequestBuilder<ClassifyGroceryProduct200Response> {
        let localVariablePath = "/food/products/classify"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: classifyGroceryProductRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "locale": (wrappedValue: locale?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ClassifyGroceryProduct200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Classify Grocery Product Bulk
     
     - parameter classifyGroceryProductBulkRequestInner: (body)  
     - parameter locale: (query) The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func classifyGroceryProductBulk(classifyGroceryProductBulkRequestInner: Set<ClassifyGroceryProductBulkRequestInner>, locale: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Set<ClassifyGroceryProductBulk200ResponseInner>?, _ error: Error?) -> Void)) -> RequestTask {
        return classifyGroceryProductBulkWithRequestBuilder(classifyGroceryProductBulkRequestInner: classifyGroceryProductBulkRequestInner, locale: locale).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Classify Grocery Product Bulk
     - POST /food/products/classifyBatch
     - Provide a set of product jsons, get back classified products.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Classify-Grocery-Product-Bulk
}
     - parameter classifyGroceryProductBulkRequestInner: (body)  
     - parameter locale: (query) The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
     - returns: RequestBuilder<Set<ClassifyGroceryProductBulk200ResponseInner>> 
     */
    open class func classifyGroceryProductBulkWithRequestBuilder(classifyGroceryProductBulkRequestInner: Set<ClassifyGroceryProductBulkRequestInner>, locale: String? = nil) -> RequestBuilder<Set<ClassifyGroceryProductBulk200ResponseInner>> {
        let localVariablePath = "/food/products/classifyBatch"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: classifyGroceryProductBulkRequestInner)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "locale": (wrappedValue: locale?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Set<ClassifyGroceryProductBulk200ResponseInner>>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Comparable Products
     
     - parameter upc: (path) The UPC of the product for which you want to find comparable products. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getComparableProducts(upc: Double, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetComparableProducts200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getComparableProductsWithRequestBuilder(upc: upc).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Comparable Products
     - GET /food/products/upc/{upc}/comparable
     - Find comparable products to the given one.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Get-Comparable-Products
}
     - parameter upc: (path) The UPC of the product for which you want to find comparable products. 
     - returns: RequestBuilder<GetComparableProducts200Response> 
     */
    open class func getComparableProductsWithRequestBuilder(upc: Double) -> RequestBuilder<GetComparableProducts200Response> {
        var localVariablePath = "/food/products/upc/{upc}/comparable"
        let upcPreEscape = "\(APIHelper.mapValueToPathItem(upc))"
        let upcPostEscape = upcPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{upc}", with: upcPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetComparableProducts200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Product Information
     
     - parameter id: (path) The item&#39;s id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getProductInformation(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetProductInformation200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getProductInformationWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Product Information
     - GET /food/products/{id}
     - Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Get-Product-Information
}
     - parameter id: (path) The item&#39;s id. 
     - returns: RequestBuilder<GetProductInformation200Response> 
     */
    open class func getProductInformationWithRequestBuilder(id: Int) -> RequestBuilder<GetProductInformation200Response> {
        var localVariablePath = "/food/products/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetProductInformation200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Product Nutrition by ID Image
     
     - parameter id: (path) The id of the product. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productNutritionByIDImage(id: Double, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return productNutritionByIDImageWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Product Nutrition by ID Image
     - GET /food/products/{id}/nutritionWidget.png
     - Visualize a product's nutritional information as an image.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Product-Nutrition-by-ID-Image
}
     - parameter id: (path) The id of the product. 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func productNutritionByIDImageWithRequestBuilder(id: Double) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/food/products/{id}/nutritionWidget.png"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Product Nutrition Label Image
     
     - parameter id: (path) The product id. 
     - parameter showOptionalNutrients: (query) Whether to show optional nutrients. (optional)
     - parameter showZeroValues: (query) Whether to show zero values. (optional)
     - parameter showIngredients: (query) Whether to show a list of ingredients. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productNutritionLabelImage(id: Double, showOptionalNutrients: Bool? = nil, showZeroValues: Bool? = nil, showIngredients: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return productNutritionLabelImageWithRequestBuilder(id: id, showOptionalNutrients: showOptionalNutrients, showZeroValues: showZeroValues, showIngredients: showIngredients).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Product Nutrition Label Image
     - GET /food/products/{id}/nutritionLabel.png
     - Get a product's nutrition label as an image.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Product-Nutrition-Label-Image
}
     - parameter id: (path) The product id. 
     - parameter showOptionalNutrients: (query) Whether to show optional nutrients. (optional)
     - parameter showZeroValues: (query) Whether to show zero values. (optional)
     - parameter showIngredients: (query) Whether to show a list of ingredients. (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func productNutritionLabelImageWithRequestBuilder(id: Double, showOptionalNutrients: Bool? = nil, showZeroValues: Bool? = nil, showIngredients: Bool? = nil) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/food/products/{id}/nutritionLabel.png"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "showOptionalNutrients": (wrappedValue: showOptionalNutrients?.encodeToJSON(), isExplode: false),
            "showZeroValues": (wrappedValue: showZeroValues?.encodeToJSON(), isExplode: false),
            "showIngredients": (wrappedValue: showIngredients?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Product Nutrition Label Widget
     
     - parameter id: (path) The product id. 
     - parameter defaultCss: (query) Whether the default CSS should be added to the response. (optional, default to true)
     - parameter showOptionalNutrients: (query) Whether to show optional nutrients. (optional)
     - parameter showZeroValues: (query) Whether to show zero values. (optional)
     - parameter showIngredients: (query) Whether to show a list of ingredients. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func productNutritionLabelWidget(id: Double, defaultCss: Bool? = nil, showOptionalNutrients: Bool? = nil, showZeroValues: Bool? = nil, showIngredients: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return productNutritionLabelWidgetWithRequestBuilder(id: id, defaultCss: defaultCss, showOptionalNutrients: showOptionalNutrients, showZeroValues: showZeroValues, showIngredients: showIngredients).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Product Nutrition Label Widget
     - GET /food/products/{id}/nutritionLabel
     - Get a product's nutrition label as an HTML widget.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Product-Nutrition-Label-Widget
}
     - parameter id: (path) The product id. 
     - parameter defaultCss: (query) Whether the default CSS should be added to the response. (optional, default to true)
     - parameter showOptionalNutrients: (query) Whether to show optional nutrients. (optional)
     - parameter showZeroValues: (query) Whether to show zero values. (optional)
     - parameter showIngredients: (query) Whether to show a list of ingredients. (optional)
     - returns: RequestBuilder<String> 
     */
    open class func productNutritionLabelWidgetWithRequestBuilder(id: Double, defaultCss: Bool? = nil, showOptionalNutrients: Bool? = nil, showZeroValues: Bool? = nil, showIngredients: Bool? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/food/products/{id}/nutritionLabel"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "defaultCss": (wrappedValue: defaultCss?.encodeToJSON(), isExplode: true),
            "showOptionalNutrients": (wrappedValue: showOptionalNutrients?.encodeToJSON(), isExplode: false),
            "showZeroValues": (wrappedValue: showZeroValues?.encodeToJSON(), isExplode: false),
            "showIngredients": (wrappedValue: showIngredients?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Search Grocery Products
     
     - parameter query: (query) The (natural language) search query. (optional)
     - parameter minCalories: (query) The minimum amount of calories the product must have. (optional)
     - parameter maxCalories: (query) The maximum amount of calories the product can have. (optional)
     - parameter minCarbs: (query) The minimum amount of carbohydrates in grams the product must have. (optional)
     - parameter maxCarbs: (query) The maximum amount of carbohydrates in grams the product can have. (optional)
     - parameter minProtein: (query) The minimum amount of protein in grams the product must have. (optional)
     - parameter maxProtein: (query) The maximum amount of protein in grams the product can have. (optional)
     - parameter minFat: (query) The minimum amount of fat in grams the product must have. (optional)
     - parameter maxFat: (query) The maximum amount of fat in grams the product can have. (optional)
     - parameter addProductInformation: (query) If set to true, you get more information about the products returned. (optional)
     - parameter offset: (query) The number of results to skip (between 0 and 900). (optional)
     - parameter number: (query) The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func searchGroceryProducts(query: String? = nil, minCalories: Double? = nil, maxCalories: Double? = nil, minCarbs: Double? = nil, maxCarbs: Double? = nil, minProtein: Double? = nil, maxProtein: Double? = nil, minFat: Double? = nil, maxFat: Double? = nil, addProductInformation: Bool? = nil, offset: Int? = nil, number: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SearchGroceryProducts200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return searchGroceryProductsWithRequestBuilder(query: query, minCalories: minCalories, maxCalories: maxCalories, minCarbs: minCarbs, maxCarbs: maxCarbs, minProtein: minProtein, maxProtein: maxProtein, minFat: minFat, maxFat: maxFat, addProductInformation: addProductInformation, offset: offset, number: number).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search Grocery Products
     - GET /food/products/search
     - Search packaged food products, such as frozen pizza or Greek yogurt.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Search-Grocery-Products
}
     - parameter query: (query) The (natural language) search query. (optional)
     - parameter minCalories: (query) The minimum amount of calories the product must have. (optional)
     - parameter maxCalories: (query) The maximum amount of calories the product can have. (optional)
     - parameter minCarbs: (query) The minimum amount of carbohydrates in grams the product must have. (optional)
     - parameter maxCarbs: (query) The maximum amount of carbohydrates in grams the product can have. (optional)
     - parameter minProtein: (query) The minimum amount of protein in grams the product must have. (optional)
     - parameter maxProtein: (query) The maximum amount of protein in grams the product can have. (optional)
     - parameter minFat: (query) The minimum amount of fat in grams the product must have. (optional)
     - parameter maxFat: (query) The maximum amount of fat in grams the product can have. (optional)
     - parameter addProductInformation: (query) If set to true, you get more information about the products returned. (optional)
     - parameter offset: (query) The number of results to skip (between 0 and 900). (optional)
     - parameter number: (query) The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     - returns: RequestBuilder<SearchGroceryProducts200Response> 
     */
    open class func searchGroceryProductsWithRequestBuilder(query: String? = nil, minCalories: Double? = nil, maxCalories: Double? = nil, minCarbs: Double? = nil, maxCarbs: Double? = nil, minProtein: Double? = nil, maxProtein: Double? = nil, minFat: Double? = nil, maxFat: Double? = nil, addProductInformation: Bool? = nil, offset: Int? = nil, number: Int? = nil) -> RequestBuilder<SearchGroceryProducts200Response> {
        let localVariablePath = "/food/products/search"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": (wrappedValue: query?.encodeToJSON(), isExplode: true),
            "minCalories": (wrappedValue: minCalories?.encodeToJSON(), isExplode: false),
            "maxCalories": (wrappedValue: maxCalories?.encodeToJSON(), isExplode: false),
            "minCarbs": (wrappedValue: minCarbs?.encodeToJSON(), isExplode: false),
            "maxCarbs": (wrappedValue: maxCarbs?.encodeToJSON(), isExplode: false),
            "minProtein": (wrappedValue: minProtein?.encodeToJSON(), isExplode: false),
            "maxProtein": (wrappedValue: maxProtein?.encodeToJSON(), isExplode: false),
            "minFat": (wrappedValue: minFat?.encodeToJSON(), isExplode: false),
            "maxFat": (wrappedValue: maxFat?.encodeToJSON(), isExplode: false),
            "addProductInformation": (wrappedValue: addProductInformation?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
            "number": (wrappedValue: number?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchGroceryProducts200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Search Grocery Products by UPC
     
     - parameter upc: (path) The product&#39;s UPC. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func searchGroceryProductsByUPC(upc: Double, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SearchGroceryProductsByUPC200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return searchGroceryProductsByUPCWithRequestBuilder(upc: upc).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search Grocery Products by UPC
     - GET /food/products/upc/{upc}
     - Get information about a packaged food using its UPC.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Search-Grocery-Products-by-UPC
}
     - parameter upc: (path) The product&#39;s UPC. 
     - returns: RequestBuilder<SearchGroceryProductsByUPC200Response> 
     */
    open class func searchGroceryProductsByUPCWithRequestBuilder(upc: Double) -> RequestBuilder<SearchGroceryProductsByUPC200Response> {
        var localVariablePath = "/food/products/upc/{upc}"
        let upcPreEscape = "\(APIHelper.mapValueToPathItem(upc))"
        let upcPostEscape = upcPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{upc}", with: upcPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchGroceryProductsByUPC200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter accept
     */
    public enum Accept_visualizeProductNutritionByID: String, CaseIterable {
        case applicationSlashJson = "application/json"
        case textSlashHtml = "text/html"
        case mediaSlashStar = "media/*"
    }

    /**
     Product Nutrition by ID Widget
     
     - parameter id: (path) The item&#39;s id. 
     - parameter defaultCss: (query) Whether the default CSS should be added to the response. (optional, default to true)
     - parameter accept: (header) Accept header. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func visualizeProductNutritionByID(id: Int, defaultCss: Bool? = nil, accept: Accept_visualizeProductNutritionByID? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return visualizeProductNutritionByIDWithRequestBuilder(id: id, defaultCss: defaultCss, accept: accept).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Product Nutrition by ID Widget
     - GET /food/products/{id}/nutritionWidget
     - Visualize a product's nutritional information as HTML including CSS.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Product-Nutrition-by-ID-Widget
}
     - parameter id: (path) The item&#39;s id. 
     - parameter defaultCss: (query) Whether the default CSS should be added to the response. (optional, default to true)
     - parameter accept: (header) Accept header. (optional)
     - returns: RequestBuilder<String> 
     */
    open class func visualizeProductNutritionByIDWithRequestBuilder(id: Int, defaultCss: Bool? = nil, accept: Accept_visualizeProductNutritionByID? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/food/products/{id}/nutritionWidget"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "defaultCss": (wrappedValue: defaultCss?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Accept": accept?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
