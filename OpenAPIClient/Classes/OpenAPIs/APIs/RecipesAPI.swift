//
// RecipesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class RecipesAPI {

    /**
     Analyze a Recipe Search Query
     
     - parameter q: (query) The recipe search query. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func analyzeARecipeSearchQuery(q: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnalyzeARecipeSearchQuery200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return analyzeARecipeSearchQueryWithRequestBuilder(q: q).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Analyze a Recipe Search Query
     - GET /recipes/queries/analyze
     - Parse a recipe search query to find out its intention.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Analyze-a-Recipe-Search-Query
}
     - parameter q: (query) The recipe search query. 
     - returns: RequestBuilder<AnalyzeARecipeSearchQuery200Response> 
     */
    open class func analyzeARecipeSearchQueryWithRequestBuilder(q: String) -> RequestBuilder<AnalyzeARecipeSearchQuery200Response> {
        let localVariablePath = "/recipes/queries/analyze"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": (wrappedValue: q.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnalyzeARecipeSearchQuery200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter contentType
     */
    public enum ContentType_analyzeRecipeInstructions: String, CaseIterable {
        case applicationSlashXWwwFormUrlencoded = "application/x-www-form-urlencoded"
        case applicationSlashJson = "application/json"
        case multipartSlashFormData = "multipart/form-data"
    }

    /**
     Analyze Recipe Instructions
     
     - parameter contentType: (header) The content type. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func analyzeRecipeInstructions(contentType: ContentType_analyzeRecipeInstructions? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnalyzeRecipeInstructions200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return analyzeRecipeInstructionsWithRequestBuilder(contentType: contentType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Analyze Recipe Instructions
     - POST /recipes/analyzeInstructions
     - This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe's instructions will be extracted independently of the step they're used in.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Analyze-Recipe-Instructions
}
     - parameter contentType: (header) The content type. (optional)
     - returns: RequestBuilder<AnalyzeRecipeInstructions200Response> 
     */
    open class func analyzeRecipeInstructionsWithRequestBuilder(contentType: ContentType_analyzeRecipeInstructions? = nil) -> RequestBuilder<AnalyzeRecipeInstructions200Response> {
        let localVariablePath = "/recipes/analyzeInstructions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
            "Content-Type": contentType?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnalyzeRecipeInstructions200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Autocomplete Recipe Search
     
     - parameter query: (query) The (natural language) search query. (optional)
     - parameter number: (query) The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func autocompleteRecipeSearch(query: String? = nil, number: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Set<AutocompleteRecipeSearch200ResponseInner>?, _ error: Error?) -> Void)) -> RequestTask {
        return autocompleteRecipeSearchWithRequestBuilder(query: query, number: number).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Autocomplete Recipe Search
     - GET /recipes/autocomplete
     - Autocomplete a partial input to suggest possible recipe names.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Autocomplete-Recipe-Search
}
     - parameter query: (query) The (natural language) search query. (optional)
     - parameter number: (query) The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     - returns: RequestBuilder<Set<AutocompleteRecipeSearch200ResponseInner>> 
     */
    open class func autocompleteRecipeSearchWithRequestBuilder(query: String? = nil, number: Int? = nil) -> RequestBuilder<Set<AutocompleteRecipeSearch200ResponseInner>> {
        let localVariablePath = "/recipes/autocomplete"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": (wrappedValue: query?.encodeToJSON(), isExplode: true),
            "number": (wrappedValue: number?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Set<AutocompleteRecipeSearch200ResponseInner>>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter contentType
     */
    public enum ContentType_classifyCuisine: String, CaseIterable {
        case applicationSlashXWwwFormUrlencoded = "application/x-www-form-urlencoded"
        case applicationSlashJson = "application/json"
        case multipartSlashFormData = "multipart/form-data"
    }

    /**
     Classify Cuisine
     
     - parameter contentType: (header) The content type. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func classifyCuisine(contentType: ContentType_classifyCuisine? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ClassifyCuisine200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return classifyCuisineWithRequestBuilder(contentType: contentType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Classify Cuisine
     - POST /recipes/cuisine
     - Classify the recipe's cuisine.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Classify-Cuisine
}
     - parameter contentType: (header) The content type. (optional)
     - returns: RequestBuilder<ClassifyCuisine200Response> 
     */
    open class func classifyCuisineWithRequestBuilder(contentType: ContentType_classifyCuisine? = nil) -> RequestBuilder<ClassifyCuisine200Response> {
        let localVariablePath = "/recipes/cuisine"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
            "Content-Type": contentType?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ClassifyCuisine200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter language
     */
    public enum Language_computeGlycemicLoad: String, CaseIterable {
        case en = "en"
        case de = "de"
    }

    /**
     Compute Glycemic Load
     
     - parameter computeGlycemicLoadRequest: (body)  
     - parameter language: (query) The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func computeGlycemicLoad(computeGlycemicLoadRequest: ComputeGlycemicLoadRequest, language: Language_computeGlycemicLoad? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ComputeGlycemicLoad200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return computeGlycemicLoadWithRequestBuilder(computeGlycemicLoadRequest: computeGlycemicLoadRequest, language: language).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Compute Glycemic Load
     - POST /food/ingredients/glycemicLoad
     - Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Compute-Glycemic-Load
}
     - parameter computeGlycemicLoadRequest: (body)  
     - parameter language: (query) The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     - returns: RequestBuilder<ComputeGlycemicLoad200Response> 
     */
    open class func computeGlycemicLoadWithRequestBuilder(computeGlycemicLoadRequest: ComputeGlycemicLoadRequest, language: Language_computeGlycemicLoad? = nil) -> RequestBuilder<ComputeGlycemicLoad200Response> {
        let localVariablePath = "/food/ingredients/glycemicLoad"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: computeGlycemicLoadRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "language": (wrappedValue: language?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ComputeGlycemicLoad200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Convert Amounts
     
     - parameter ingredientName: (query) The ingredient which you want to convert. 
     - parameter sourceAmount: (query) The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;. 
     - parameter sourceUnit: (query) The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; 
     - parameter targetUnit: (query) The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func convertAmounts(ingredientName: String, sourceAmount: Double, sourceUnit: String, targetUnit: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ConvertAmounts200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return convertAmountsWithRequestBuilder(ingredientName: ingredientName, sourceAmount: sourceAmount, sourceUnit: sourceUnit, targetUnit: targetUnit).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Convert Amounts
     - GET /recipes/convert
     - Convert amounts like \"2 cups of flour to grams\".
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Convert-Amounts
}
     - parameter ingredientName: (query) The ingredient which you want to convert. 
     - parameter sourceAmount: (query) The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;. 
     - parameter sourceUnit: (query) The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; 
     - parameter targetUnit: (query) The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot; 
     - returns: RequestBuilder<ConvertAmounts200Response> 
     */
    open class func convertAmountsWithRequestBuilder(ingredientName: String, sourceAmount: Double, sourceUnit: String, targetUnit: String) -> RequestBuilder<ConvertAmounts200Response> {
        let localVariablePath = "/recipes/convert"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ingredientName": (wrappedValue: ingredientName.encodeToJSON(), isExplode: false),
            "sourceAmount": (wrappedValue: sourceAmount.encodeToJSON(), isExplode: false),
            "sourceUnit": (wrappedValue: sourceUnit.encodeToJSON(), isExplode: false),
            "targetUnit": (wrappedValue: targetUnit.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConvertAmounts200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter contentType
     */
    public enum ContentType_createRecipeCard: String, CaseIterable {
        case applicationSlashXWwwFormUrlencoded = "application/x-www-form-urlencoded"
        case applicationSlashJson = "application/json"
        case multipartSlashFormData = "multipart/form-data"
    }

    /**
     Create Recipe Card
     
     - parameter contentType: (header) The content type. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createRecipeCard(contentType: ContentType_createRecipeCard? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreateRecipeCard200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return createRecipeCardWithRequestBuilder(contentType: contentType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Recipe Card
     - POST /recipes/visualizeRecipe
     - Generate a recipe card for a recipe.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Create-Recipe-Card
}
     - parameter contentType: (header) The content type. (optional)
     - returns: RequestBuilder<CreateRecipeCard200Response> 
     */
    open class func createRecipeCardWithRequestBuilder(contentType: ContentType_createRecipeCard? = nil) -> RequestBuilder<CreateRecipeCard200Response> {
        let localVariablePath = "/recipes/visualizeRecipe"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
            "Content-Type": contentType?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateRecipeCard200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Equipment by ID Image
     
     - parameter id: (path) The recipe id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func equipmentByIDImage(id: Double, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return equipmentByIDImageWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Equipment by ID Image
     - GET /recipes/{id}/equipmentWidget.png
     - Visualize a recipe's equipment list as an image.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Equipment-by-ID-Image
}
     - parameter id: (path) The recipe id. 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func equipmentByIDImageWithRequestBuilder(id: Double) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/recipes/{id}/equipmentWidget.png"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Extract Recipe from Website
     
     - parameter url: (query) The URL of the recipe page. 
     - parameter forceExtraction: (query) If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)
     - parameter analyze: (query) If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)
     - parameter includeNutrition: (query) Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     - parameter includeTaste: (query) Whether taste data should be added to correctly parsed ingredients. (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func extractRecipeFromWebsite(url: String, forceExtraction: Bool? = nil, analyze: Bool? = nil, includeNutrition: Bool? = nil, includeTaste: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetRecipeInformation200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return extractRecipeFromWebsiteWithRequestBuilder(url: url, forceExtraction: forceExtraction, analyze: analyze, includeNutrition: includeNutrition, includeTaste: includeTaste).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Extract Recipe from Website
     - GET /recipes/extract
     - This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Extract-Recipe-from-Website
}
     - parameter url: (query) The URL of the recipe page. 
     - parameter forceExtraction: (query) If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower. (optional)
     - parameter analyze: (query) If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more. (optional)
     - parameter includeNutrition: (query) Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     - parameter includeTaste: (query) Whether taste data should be added to correctly parsed ingredients. (optional, default to false)
     - returns: RequestBuilder<GetRecipeInformation200Response> 
     */
    open class func extractRecipeFromWebsiteWithRequestBuilder(url: String, forceExtraction: Bool? = nil, analyze: Bool? = nil, includeNutrition: Bool? = nil, includeTaste: Bool? = nil) -> RequestBuilder<GetRecipeInformation200Response> {
        let localVariablePath = "/recipes/extract"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "url": (wrappedValue: url.encodeToJSON(), isExplode: false),
            "forceExtraction": (wrappedValue: forceExtraction?.encodeToJSON(), isExplode: false),
            "analyze": (wrappedValue: analyze?.encodeToJSON(), isExplode: false),
            "includeNutrition": (wrappedValue: includeNutrition?.encodeToJSON(), isExplode: true),
            "includeTaste": (wrappedValue: includeTaste?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetRecipeInformation200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Analyzed Recipe Instructions
     
     - parameter id: (path) The item&#39;s id. 
     - parameter stepBreakdown: (query) Whether to break down the recipe steps even more. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAnalyzedRecipeInstructions(id: Int, stepBreakdown: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetAnalyzedRecipeInstructions200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getAnalyzedRecipeInstructionsWithRequestBuilder(id: id, stepBreakdown: stepBreakdown).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Analyzed Recipe Instructions
     - GET /recipes/{id}/analyzedInstructions
     - Get an analyzed breakdown of a recipe's instructions. Each step is enriched with the ingredients and equipment required.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Get-Analyzed-Recipe-Instructions
}
     - parameter id: (path) The item&#39;s id. 
     - parameter stepBreakdown: (query) Whether to break down the recipe steps even more. (optional)
     - returns: RequestBuilder<GetAnalyzedRecipeInstructions200Response> 
     */
    open class func getAnalyzedRecipeInstructionsWithRequestBuilder(id: Int, stepBreakdown: Bool? = nil) -> RequestBuilder<GetAnalyzedRecipeInstructions200Response> {
        var localVariablePath = "/recipes/{id}/analyzedInstructions"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "stepBreakdown": (wrappedValue: stepBreakdown?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetAnalyzedRecipeInstructions200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Random Recipes
     
     - parameter limitLicense: (query) Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     - parameter tags: (query) The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)
     - parameter number: (query) The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getRandomRecipes(limitLicense: Bool? = nil, tags: String? = nil, number: Int? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetRandomRecipes200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getRandomRecipesWithRequestBuilder(limitLicense: limitLicense, tags: tags, number: number).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Random Recipes
     - GET /recipes/random
     - Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Get-Random-Recipes
}
     - parameter limitLicense: (query) Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     - parameter tags: (query) The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)
     - parameter number: (query) The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     - returns: RequestBuilder<GetRandomRecipes200Response> 
     */
    open class func getRandomRecipesWithRequestBuilder(limitLicense: Bool? = nil, tags: String? = nil, number: Int? = nil) -> RequestBuilder<GetRandomRecipes200Response> {
        let localVariablePath = "/recipes/random"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limitLicense": (wrappedValue: limitLicense?.encodeToJSON(), isExplode: true),
            "tags": (wrappedValue: tags?.encodeToJSON(), isExplode: true),
            "number": (wrappedValue: number?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetRandomRecipes200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Equipment by ID
     
     - parameter id: (path) The item&#39;s id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getRecipeEquipmentByID(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetRecipeEquipmentByID200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getRecipeEquipmentByIDWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Equipment by ID
     - GET /recipes/{id}/equipmentWidget.json
     - Get a recipe's equipment list.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Equipment-by-ID
}
     - parameter id: (path) The item&#39;s id. 
     - returns: RequestBuilder<GetRecipeEquipmentByID200Response> 
     */
    open class func getRecipeEquipmentByIDWithRequestBuilder(id: Int) -> RequestBuilder<GetRecipeEquipmentByID200Response> {
        var localVariablePath = "/recipes/{id}/equipmentWidget.json"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetRecipeEquipmentByID200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Recipe Information
     
     - parameter id: (path) The item&#39;s id. 
     - parameter includeNutrition: (query) Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getRecipeInformation(id: Int, includeNutrition: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetRecipeInformation200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getRecipeInformationWithRequestBuilder(id: id, includeNutrition: includeNutrition).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Recipe Information
     - GET /recipes/{id}/information
     - Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Get-Recipe-Information
}
     - parameter id: (path) The item&#39;s id. 
     - parameter includeNutrition: (query) Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     - returns: RequestBuilder<GetRecipeInformation200Response> 
     */
    open class func getRecipeInformationWithRequestBuilder(id: Int, includeNutrition: Bool? = nil) -> RequestBuilder<GetRecipeInformation200Response> {
        var localVariablePath = "/recipes/{id}/information"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "includeNutrition": (wrappedValue: includeNutrition?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetRecipeInformation200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Recipe Information Bulk
     
     - parameter ids: (query) A comma-separated list of recipe ids. 
     - parameter includeNutrition: (query) Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getRecipeInformationBulk(ids: String, includeNutrition: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Set<GetRecipeInformationBulk200ResponseInner>?, _ error: Error?) -> Void)) -> RequestTask {
        return getRecipeInformationBulkWithRequestBuilder(ids: ids, includeNutrition: includeNutrition).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Recipe Information Bulk
     - GET /recipes/informationBulk
     - Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Get-Recipe-Information-Bulk
}
     - parameter ids: (query) A comma-separated list of recipe ids. 
     - parameter includeNutrition: (query) Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (optional, default to false)
     - returns: RequestBuilder<Set<GetRecipeInformationBulk200ResponseInner>> 
     */
    open class func getRecipeInformationBulkWithRequestBuilder(ids: String, includeNutrition: Bool? = nil) -> RequestBuilder<Set<GetRecipeInformationBulk200ResponseInner>> {
        let localVariablePath = "/recipes/informationBulk"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ids": (wrappedValue: ids.encodeToJSON(), isExplode: false),
            "includeNutrition": (wrappedValue: includeNutrition?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Set<GetRecipeInformationBulk200ResponseInner>>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Ingredients by ID
     
     - parameter id: (path) The item&#39;s id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getRecipeIngredientsByID(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetRecipeIngredientsByID200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getRecipeIngredientsByIDWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Ingredients by ID
     - GET /recipes/{id}/ingredientWidget.json
     - Get a recipe's ingredient list.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Ingredients-by-ID
}
     - parameter id: (path) The item&#39;s id. 
     - returns: RequestBuilder<GetRecipeIngredientsByID200Response> 
     */
    open class func getRecipeIngredientsByIDWithRequestBuilder(id: Int) -> RequestBuilder<GetRecipeIngredientsByID200Response> {
        var localVariablePath = "/recipes/{id}/ingredientWidget.json"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetRecipeIngredientsByID200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Nutrition by ID
     
     - parameter id: (path) The item&#39;s id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getRecipeNutritionWidgetByID(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetRecipeNutritionWidgetByID200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getRecipeNutritionWidgetByIDWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Nutrition by ID
     - GET /recipes/{id}/nutritionWidget.json
     - Get a recipe's nutrition data.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Nutrition-by-ID
}
     - parameter id: (path) The item&#39;s id. 
     - returns: RequestBuilder<GetRecipeNutritionWidgetByID200Response> 
     */
    open class func getRecipeNutritionWidgetByIDWithRequestBuilder(id: Int) -> RequestBuilder<GetRecipeNutritionWidgetByID200Response> {
        var localVariablePath = "/recipes/{id}/nutritionWidget.json"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetRecipeNutritionWidgetByID200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Price Breakdown by ID
     
     - parameter id: (path) The item&#39;s id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getRecipePriceBreakdownByID(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetRecipePriceBreakdownByID200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getRecipePriceBreakdownByIDWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Price Breakdown by ID
     - GET /recipes/{id}/priceBreakdownWidget.json
     - Get a recipe's price breakdown data.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Price-Breakdown-by-ID
}
     - parameter id: (path) The item&#39;s id. 
     - returns: RequestBuilder<GetRecipePriceBreakdownByID200Response> 
     */
    open class func getRecipePriceBreakdownByIDWithRequestBuilder(id: Int) -> RequestBuilder<GetRecipePriceBreakdownByID200Response> {
        var localVariablePath = "/recipes/{id}/priceBreakdownWidget.json"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetRecipePriceBreakdownByID200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Taste by ID
     
     - parameter id: (path) The item&#39;s id. 
     - parameter normalize: (query) Normalize to the strongest taste. (optional, default to true)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getRecipeTasteByID(id: Int, normalize: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetRecipeTasteByID200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getRecipeTasteByIDWithRequestBuilder(id: id, normalize: normalize).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Taste by ID
     - GET /recipes/{id}/tasteWidget.json
     - Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Taste-by-ID
}
     - parameter id: (path) The item&#39;s id. 
     - parameter normalize: (query) Normalize to the strongest taste. (optional, default to true)
     - returns: RequestBuilder<GetRecipeTasteByID200Response> 
     */
    open class func getRecipeTasteByIDWithRequestBuilder(id: Int, normalize: Bool? = nil) -> RequestBuilder<GetRecipeTasteByID200Response> {
        var localVariablePath = "/recipes/{id}/tasteWidget.json"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "normalize": (wrappedValue: normalize?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetRecipeTasteByID200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Similar Recipes
     
     - parameter id: (path) The item&#39;s id. 
     - parameter number: (query) The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     - parameter limitLicense: (query) Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getSimilarRecipes(id: Int, number: Int? = nil, limitLicense: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Set<GetSimilarRecipes200ResponseInner>?, _ error: Error?) -> Void)) -> RequestTask {
        return getSimilarRecipesWithRequestBuilder(id: id, number: number, limitLicense: limitLicense).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Similar Recipes
     - GET /recipes/{id}/similar
     - Find recipes which are similar to the given one.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Get-Similar-Recipes
}
     - parameter id: (path) The item&#39;s id. 
     - parameter number: (query) The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     - parameter limitLicense: (query) Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     - returns: RequestBuilder<Set<GetSimilarRecipes200ResponseInner>> 
     */
    open class func getSimilarRecipesWithRequestBuilder(id: Int, number: Int? = nil, limitLicense: Bool? = nil) -> RequestBuilder<Set<GetSimilarRecipes200ResponseInner>> {
        var localVariablePath = "/recipes/{id}/similar"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "number": (wrappedValue: number?.encodeToJSON(), isExplode: true),
            "limitLicense": (wrappedValue: limitLicense?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Set<GetSimilarRecipes200ResponseInner>>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Guess Nutrition by Dish Name
     
     - parameter title: (query) The title of the dish. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func guessNutritionByDishName(title: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GuessNutritionByDishName200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return guessNutritionByDishNameWithRequestBuilder(title: title).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Guess Nutrition by Dish Name
     - GET /recipes/guessNutrition
     - Estimate the macronutrients of a dish based on its title.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Guess-Nutrition-by-Dish-Name
}
     - parameter title: (query) The title of the dish. 
     - returns: RequestBuilder<GuessNutritionByDishName200Response> 
     */
    open class func guessNutritionByDishNameWithRequestBuilder(title: String) -> RequestBuilder<GuessNutritionByDishName200Response> {
        let localVariablePath = "/recipes/guessNutrition"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "title": (wrappedValue: title.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GuessNutritionByDishName200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter measure
     */
    public enum Measure_ingredientsByIDImage: String, CaseIterable {
        case us = "us"
        case metric = "metric"
    }

    /**
     Ingredients by ID Image
     
     - parameter id: (path) The recipe id. 
     - parameter measure: (query) Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func ingredientsByIDImage(id: Double, measure: Measure_ingredientsByIDImage? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return ingredientsByIDImageWithRequestBuilder(id: id, measure: measure).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Ingredients by ID Image
     - GET /recipes/{id}/ingredientWidget.png
     - Visualize a recipe's ingredient list.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Ingredients-by-ID-Image
}
     - parameter id: (path) The recipe id. 
     - parameter measure: (query) Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func ingredientsByIDImageWithRequestBuilder(id: Double, measure: Measure_ingredientsByIDImage? = nil) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/recipes/{id}/ingredientWidget.png"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "measure": (wrappedValue: measure?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter contentType
     */
    public enum ContentType_parseIngredients: String, CaseIterable {
        case applicationSlashXWwwFormUrlencoded = "application/x-www-form-urlencoded"
        case applicationSlashJson = "application/json"
        case multipartSlashFormData = "multipart/form-data"
    }

    /**
     * enum for parameter language
     */
    public enum Language_parseIngredients: String, CaseIterable {
        case en = "en"
        case de = "de"
    }

    /**
     Parse Ingredients
     
     - parameter contentType: (header) The content type. (optional)
     - parameter language: (query) The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func parseIngredients(contentType: ContentType_parseIngredients? = nil, language: Language_parseIngredients? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Set<ParseIngredients200ResponseInner>?, _ error: Error?) -> Void)) -> RequestTask {
        return parseIngredientsWithRequestBuilder(contentType: contentType, language: language).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Parse Ingredients
     - POST /recipes/parseIngredients
     - Extract an ingredient from plain text.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Parse-Ingredients
}
     - parameter contentType: (header) The content type. (optional)
     - parameter language: (query) The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     - returns: RequestBuilder<Set<ParseIngredients200ResponseInner>> 
     */
    open class func parseIngredientsWithRequestBuilder(contentType: ContentType_parseIngredients? = nil, language: Language_parseIngredients? = nil) -> RequestBuilder<Set<ParseIngredients200ResponseInner>> {
        let localVariablePath = "/recipes/parseIngredients"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "language": (wrappedValue: language?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
            "Content-Type": contentType?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Set<ParseIngredients200ResponseInner>>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Price Breakdown by ID Image
     
     - parameter id: (path) The recipe id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func priceBreakdownByIDImage(id: Double, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return priceBreakdownByIDImageWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Price Breakdown by ID Image
     - GET /recipes/{id}/priceBreakdownWidget.png
     - Visualize a recipe's price breakdown.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Price-Breakdown-by-ID-Image
}
     - parameter id: (path) The recipe id. 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func priceBreakdownByIDImageWithRequestBuilder(id: Double) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/recipes/{id}/priceBreakdownWidget.png"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Quick Answer
     
     - parameter q: (query) The nutrition related question. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func quickAnswer(q: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: QuickAnswer200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return quickAnswerWithRequestBuilder(q: q).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Quick Answer
     - GET /recipes/quickAnswer
     - Answer a nutrition related natural language question.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Quick-Answer
}
     - parameter q: (query) The nutrition related question. 
     - returns: RequestBuilder<QuickAnswer200Response> 
     */
    open class func quickAnswerWithRequestBuilder(q: String) -> RequestBuilder<QuickAnswer200Response> {
        let localVariablePath = "/recipes/quickAnswer"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "q": (wrappedValue: q.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<QuickAnswer200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Recipe Nutrition by ID Image
     
     - parameter id: (path) The recipe id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func recipeNutritionByIDImage(id: Double, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return recipeNutritionByIDImageWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Recipe Nutrition by ID Image
     - GET /recipes/{id}/nutritionWidget.png
     - Visualize a recipe's nutritional information as an image.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Recipe-Nutrition-by-ID-Image
}
     - parameter id: (path) The recipe id. 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func recipeNutritionByIDImageWithRequestBuilder(id: Double) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/recipes/{id}/nutritionWidget.png"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Recipe Nutrition Label Image
     
     - parameter id: (path) The recipe id. 
     - parameter showOptionalNutrients: (query) Whether to show optional nutrients. (optional)
     - parameter showZeroValues: (query) Whether to show zero values. (optional)
     - parameter showIngredients: (query) Whether to show a list of ingredients. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func recipeNutritionLabelImage(id: Double, showOptionalNutrients: Bool? = nil, showZeroValues: Bool? = nil, showIngredients: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return recipeNutritionLabelImageWithRequestBuilder(id: id, showOptionalNutrients: showOptionalNutrients, showZeroValues: showZeroValues, showIngredients: showIngredients).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Recipe Nutrition Label Image
     - GET /recipes/{id}/nutritionLabel.png
     - Get a recipe's nutrition label as an image.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Recipe-Nutrition-Label-Image
}
     - parameter id: (path) The recipe id. 
     - parameter showOptionalNutrients: (query) Whether to show optional nutrients. (optional)
     - parameter showZeroValues: (query) Whether to show zero values. (optional)
     - parameter showIngredients: (query) Whether to show a list of ingredients. (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func recipeNutritionLabelImageWithRequestBuilder(id: Double, showOptionalNutrients: Bool? = nil, showZeroValues: Bool? = nil, showIngredients: Bool? = nil) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/recipes/{id}/nutritionLabel.png"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "showOptionalNutrients": (wrappedValue: showOptionalNutrients?.encodeToJSON(), isExplode: false),
            "showZeroValues": (wrappedValue: showZeroValues?.encodeToJSON(), isExplode: false),
            "showIngredients": (wrappedValue: showIngredients?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Recipe Nutrition Label Widget
     
     - parameter id: (path) The recipe id. 
     - parameter defaultCss: (query) Whether the default CSS should be added to the response. (optional, default to true)
     - parameter showOptionalNutrients: (query) Whether to show optional nutrients. (optional)
     - parameter showZeroValues: (query) Whether to show zero values. (optional)
     - parameter showIngredients: (query) Whether to show a list of ingredients. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func recipeNutritionLabelWidget(id: Double, defaultCss: Bool? = nil, showOptionalNutrients: Bool? = nil, showZeroValues: Bool? = nil, showIngredients: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return recipeNutritionLabelWidgetWithRequestBuilder(id: id, defaultCss: defaultCss, showOptionalNutrients: showOptionalNutrients, showZeroValues: showZeroValues, showIngredients: showIngredients).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Recipe Nutrition Label Widget
     - GET /recipes/{id}/nutritionLabel
     - Get a recipe's nutrition label as an HTML widget.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Recipe-Nutrition-Label-Widget
}
     - parameter id: (path) The recipe id. 
     - parameter defaultCss: (query) Whether the default CSS should be added to the response. (optional, default to true)
     - parameter showOptionalNutrients: (query) Whether to show optional nutrients. (optional)
     - parameter showZeroValues: (query) Whether to show zero values. (optional)
     - parameter showIngredients: (query) Whether to show a list of ingredients. (optional)
     - returns: RequestBuilder<String> 
     */
    open class func recipeNutritionLabelWidgetWithRequestBuilder(id: Double, defaultCss: Bool? = nil, showOptionalNutrients: Bool? = nil, showZeroValues: Bool? = nil, showIngredients: Bool? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/recipes/{id}/nutritionLabel"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "defaultCss": (wrappedValue: defaultCss?.encodeToJSON(), isExplode: true),
            "showOptionalNutrients": (wrappedValue: showOptionalNutrients?.encodeToJSON(), isExplode: false),
            "showZeroValues": (wrappedValue: showZeroValues?.encodeToJSON(), isExplode: false),
            "showIngredients": (wrappedValue: showIngredients?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Recipe Taste by ID Image
     
     - parameter id: (path) The recipe id. 
     - parameter normalize: (query) Normalize to the strongest taste. (optional)
     - parameter rgb: (query) Red, green, blue values for the chart color. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func recipeTasteByIDImage(id: Double, normalize: Bool? = nil, rgb: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return recipeTasteByIDImageWithRequestBuilder(id: id, normalize: normalize, rgb: rgb).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Recipe Taste by ID Image
     - GET /recipes/{id}/tasteWidget.png
     - Get a recipe's taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Recipe-Taste-by-ID-Image
}
     - parameter id: (path) The recipe id. 
     - parameter normalize: (query) Normalize to the strongest taste. (optional)
     - parameter rgb: (query) Red, green, blue values for the chart color. (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func recipeTasteByIDImageWithRequestBuilder(id: Double, normalize: Bool? = nil, rgb: String? = nil) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/recipes/{id}/tasteWidget.png"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "normalize": (wrappedValue: normalize?.encodeToJSON(), isExplode: false),
            "rgb": (wrappedValue: rgb?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Search Recipes
     
     - parameter query: (query) The (natural language) search query. (optional)
     - parameter cuisine: (query) The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)
     - parameter excludeCuisine: (query) The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)
     - parameter diet: (query) The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
     - parameter intolerances: (query) A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     - parameter equipment: (query) The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)
     - parameter includeIngredients: (query) A comma-separated list of ingredients that should/must be used in the recipes. (optional)
     - parameter excludeIngredients: (query) A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     - parameter type: (query) The type of recipe. See a full list of supported meal types. (optional)
     - parameter instructionsRequired: (query) Whether the recipes must have instructions. (optional)
     - parameter fillIngredients: (query) Add information about the ingredients and whether they are used or missing in relation to the query. (optional)
     - parameter addRecipeInformation: (query) If set to true, you get more information about the recipes returned. (optional)
     - parameter addRecipeNutrition: (query) If set to true, you get nutritional information about each recipes returned. (optional)
     - parameter author: (query) The username of the recipe author. (optional)
     - parameter tags: (query) The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)
     - parameter recipeBoxId: (query) The id of the recipe box to which the search should be limited to. (optional)
     - parameter titleMatch: (query) Enter text that must be found in the title of the recipes. (optional)
     - parameter maxReadyTime: (query) The maximum time in minutes it should take to prepare and cook the recipe. (optional)
     - parameter ignorePantry: (query) Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)
     - parameter sort: (query) The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     - parameter sortDirection: (query) The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
     - parameter minCarbs: (query) The minimum amount of carbohydrates in grams the recipe must have. (optional)
     - parameter maxCarbs: (query) The maximum amount of carbohydrates in grams the recipe can have. (optional)
     - parameter minProtein: (query) The minimum amount of protein in grams the recipe must have. (optional)
     - parameter maxProtein: (query) The maximum amount of protein in grams the recipe can have. (optional)
     - parameter minCalories: (query) The minimum amount of calories the recipe must have. (optional)
     - parameter maxCalories: (query) The maximum amount of calories the recipe can have. (optional)
     - parameter minFat: (query) The minimum amount of fat in grams the recipe must have. (optional)
     - parameter maxFat: (query) The maximum amount of fat in grams the recipe can have. (optional)
     - parameter minAlcohol: (query) The minimum amount of alcohol in grams the recipe must have. (optional)
     - parameter maxAlcohol: (query) The maximum amount of alcohol in grams the recipe can have. (optional)
     - parameter minCaffeine: (query) The minimum amount of caffeine in milligrams the recipe must have. (optional)
     - parameter maxCaffeine: (query) The maximum amount of caffeine in milligrams the recipe can have. (optional)
     - parameter minCopper: (query) The minimum amount of copper in milligrams the recipe must have. (optional)
     - parameter maxCopper: (query) The maximum amount of copper in milligrams the recipe can have. (optional)
     - parameter minCalcium: (query) The minimum amount of calcium in milligrams the recipe must have. (optional)
     - parameter maxCalcium: (query) The maximum amount of calcium in milligrams the recipe can have. (optional)
     - parameter minCholine: (query) The minimum amount of choline in milligrams the recipe must have. (optional)
     - parameter maxCholine: (query) The maximum amount of choline in milligrams the recipe can have. (optional)
     - parameter minCholesterol: (query) The minimum amount of cholesterol in milligrams the recipe must have. (optional)
     - parameter maxCholesterol: (query) The maximum amount of cholesterol in milligrams the recipe can have. (optional)
     - parameter minFluoride: (query) The minimum amount of fluoride in milligrams the recipe must have. (optional)
     - parameter maxFluoride: (query) The maximum amount of fluoride in milligrams the recipe can have. (optional)
     - parameter minSaturatedFat: (query) The minimum amount of saturated fat in grams the recipe must have. (optional)
     - parameter maxSaturatedFat: (query) The maximum amount of saturated fat in grams the recipe can have. (optional)
     - parameter minVitaminA: (query) The minimum amount of Vitamin A in IU the recipe must have. (optional)
     - parameter maxVitaminA: (query) The maximum amount of Vitamin A in IU the recipe can have. (optional)
     - parameter minVitaminC: (query) The minimum amount of Vitamin C milligrams the recipe must have. (optional)
     - parameter maxVitaminC: (query) The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
     - parameter minVitaminD: (query) The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
     - parameter maxVitaminD: (query) The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
     - parameter minVitaminE: (query) The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
     - parameter maxVitaminE: (query) The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
     - parameter minVitaminK: (query) The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
     - parameter maxVitaminK: (query) The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
     - parameter minVitaminB1: (query) The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
     - parameter maxVitaminB1: (query) The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
     - parameter minVitaminB2: (query) The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
     - parameter maxVitaminB2: (query) The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
     - parameter minVitaminB5: (query) The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
     - parameter maxVitaminB5: (query) The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
     - parameter minVitaminB3: (query) The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
     - parameter maxVitaminB3: (query) The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
     - parameter minVitaminB6: (query) The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
     - parameter maxVitaminB6: (query) The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
     - parameter minVitaminB12: (query) The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
     - parameter maxVitaminB12: (query) The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
     - parameter minFiber: (query) The minimum amount of fiber in grams the recipe must have. (optional)
     - parameter maxFiber: (query) The maximum amount of fiber in grams the recipe can have. (optional)
     - parameter minFolate: (query) The minimum amount of folate in micrograms the recipe must have. (optional)
     - parameter maxFolate: (query) The maximum amount of folate in micrograms the recipe can have. (optional)
     - parameter minFolicAcid: (query) The minimum amount of folic acid in micrograms the recipe must have. (optional)
     - parameter maxFolicAcid: (query) The maximum amount of folic acid in micrograms the recipe can have. (optional)
     - parameter minIodine: (query) The minimum amount of iodine in micrograms the recipe must have. (optional)
     - parameter maxIodine: (query) The maximum amount of iodine in micrograms the recipe can have. (optional)
     - parameter minIron: (query) The minimum amount of iron in milligrams the recipe must have. (optional)
     - parameter maxIron: (query) The maximum amount of iron in milligrams the recipe can have. (optional)
     - parameter minMagnesium: (query) The minimum amount of magnesium in milligrams the recipe must have. (optional)
     - parameter maxMagnesium: (query) The maximum amount of magnesium in milligrams the recipe can have. (optional)
     - parameter minManganese: (query) The minimum amount of manganese in milligrams the recipe must have. (optional)
     - parameter maxManganese: (query) The maximum amount of manganese in milligrams the recipe can have. (optional)
     - parameter minPhosphorus: (query) The minimum amount of phosphorus in milligrams the recipe must have. (optional)
     - parameter maxPhosphorus: (query) The maximum amount of phosphorus in milligrams the recipe can have. (optional)
     - parameter minPotassium: (query) The minimum amount of potassium in milligrams the recipe must have. (optional)
     - parameter maxPotassium: (query) The maximum amount of potassium in milligrams the recipe can have. (optional)
     - parameter minSelenium: (query) The minimum amount of selenium in micrograms the recipe must have. (optional)
     - parameter maxSelenium: (query) The maximum amount of selenium in micrograms the recipe can have. (optional)
     - parameter minSodium: (query) The minimum amount of sodium in milligrams the recipe must have. (optional)
     - parameter maxSodium: (query) The maximum amount of sodium in milligrams the recipe can have. (optional)
     - parameter minSugar: (query) The minimum amount of sugar in grams the recipe must have. (optional)
     - parameter maxSugar: (query) The maximum amount of sugar in grams the recipe can have. (optional)
     - parameter minZinc: (query) The minimum amount of zinc in milligrams the recipe must have. (optional)
     - parameter maxZinc: (query) The maximum amount of zinc in milligrams the recipe can have. (optional)
     - parameter offset: (query) The number of results to skip (between 0 and 900). (optional)
     - parameter number: (query) The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     - parameter limitLicense: (query) Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func searchRecipes(query: String? = nil, cuisine: String? = nil, excludeCuisine: String? = nil, diet: String? = nil, intolerances: String? = nil, equipment: String? = nil, includeIngredients: String? = nil, excludeIngredients: String? = nil, type: String? = nil, instructionsRequired: Bool? = nil, fillIngredients: Bool? = nil, addRecipeInformation: Bool? = nil, addRecipeNutrition: Bool? = nil, author: String? = nil, tags: String? = nil, recipeBoxId: Double? = nil, titleMatch: String? = nil, maxReadyTime: Double? = nil, ignorePantry: Bool? = nil, sort: String? = nil, sortDirection: String? = nil, minCarbs: Double? = nil, maxCarbs: Double? = nil, minProtein: Double? = nil, maxProtein: Double? = nil, minCalories: Double? = nil, maxCalories: Double? = nil, minFat: Double? = nil, maxFat: Double? = nil, minAlcohol: Double? = nil, maxAlcohol: Double? = nil, minCaffeine: Double? = nil, maxCaffeine: Double? = nil, minCopper: Double? = nil, maxCopper: Double? = nil, minCalcium: Double? = nil, maxCalcium: Double? = nil, minCholine: Double? = nil, maxCholine: Double? = nil, minCholesterol: Double? = nil, maxCholesterol: Double? = nil, minFluoride: Double? = nil, maxFluoride: Double? = nil, minSaturatedFat: Double? = nil, maxSaturatedFat: Double? = nil, minVitaminA: Double? = nil, maxVitaminA: Double? = nil, minVitaminC: Double? = nil, maxVitaminC: Double? = nil, minVitaminD: Double? = nil, maxVitaminD: Double? = nil, minVitaminE: Double? = nil, maxVitaminE: Double? = nil, minVitaminK: Double? = nil, maxVitaminK: Double? = nil, minVitaminB1: Double? = nil, maxVitaminB1: Double? = nil, minVitaminB2: Double? = nil, maxVitaminB2: Double? = nil, minVitaminB5: Double? = nil, maxVitaminB5: Double? = nil, minVitaminB3: Double? = nil, maxVitaminB3: Double? = nil, minVitaminB6: Double? = nil, maxVitaminB6: Double? = nil, minVitaminB12: Double? = nil, maxVitaminB12: Double? = nil, minFiber: Double? = nil, maxFiber: Double? = nil, minFolate: Double? = nil, maxFolate: Double? = nil, minFolicAcid: Double? = nil, maxFolicAcid: Double? = nil, minIodine: Double? = nil, maxIodine: Double? = nil, minIron: Double? = nil, maxIron: Double? = nil, minMagnesium: Double? = nil, maxMagnesium: Double? = nil, minManganese: Double? = nil, maxManganese: Double? = nil, minPhosphorus: Double? = nil, maxPhosphorus: Double? = nil, minPotassium: Double? = nil, maxPotassium: Double? = nil, minSelenium: Double? = nil, maxSelenium: Double? = nil, minSodium: Double? = nil, maxSodium: Double? = nil, minSugar: Double? = nil, maxSugar: Double? = nil, minZinc: Double? = nil, maxZinc: Double? = nil, offset: Int? = nil, number: Int? = nil, limitLicense: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SearchRecipes200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return searchRecipesWithRequestBuilder(query: query, cuisine: cuisine, excludeCuisine: excludeCuisine, diet: diet, intolerances: intolerances, equipment: equipment, includeIngredients: includeIngredients, excludeIngredients: excludeIngredients, type: type, instructionsRequired: instructionsRequired, fillIngredients: fillIngredients, addRecipeInformation: addRecipeInformation, addRecipeNutrition: addRecipeNutrition, author: author, tags: tags, recipeBoxId: recipeBoxId, titleMatch: titleMatch, maxReadyTime: maxReadyTime, ignorePantry: ignorePantry, sort: sort, sortDirection: sortDirection, minCarbs: minCarbs, maxCarbs: maxCarbs, minProtein: minProtein, maxProtein: maxProtein, minCalories: minCalories, maxCalories: maxCalories, minFat: minFat, maxFat: maxFat, minAlcohol: minAlcohol, maxAlcohol: maxAlcohol, minCaffeine: minCaffeine, maxCaffeine: maxCaffeine, minCopper: minCopper, maxCopper: maxCopper, minCalcium: minCalcium, maxCalcium: maxCalcium, minCholine: minCholine, maxCholine: maxCholine, minCholesterol: minCholesterol, maxCholesterol: maxCholesterol, minFluoride: minFluoride, maxFluoride: maxFluoride, minSaturatedFat: minSaturatedFat, maxSaturatedFat: maxSaturatedFat, minVitaminA: minVitaminA, maxVitaminA: maxVitaminA, minVitaminC: minVitaminC, maxVitaminC: maxVitaminC, minVitaminD: minVitaminD, maxVitaminD: maxVitaminD, minVitaminE: minVitaminE, maxVitaminE: maxVitaminE, minVitaminK: minVitaminK, maxVitaminK: maxVitaminK, minVitaminB1: minVitaminB1, maxVitaminB1: maxVitaminB1, minVitaminB2: minVitaminB2, maxVitaminB2: maxVitaminB2, minVitaminB5: minVitaminB5, maxVitaminB5: maxVitaminB5, minVitaminB3: minVitaminB3, maxVitaminB3: maxVitaminB3, minVitaminB6: minVitaminB6, maxVitaminB6: maxVitaminB6, minVitaminB12: minVitaminB12, maxVitaminB12: maxVitaminB12, minFiber: minFiber, maxFiber: maxFiber, minFolate: minFolate, maxFolate: maxFolate, minFolicAcid: minFolicAcid, maxFolicAcid: maxFolicAcid, minIodine: minIodine, maxIodine: maxIodine, minIron: minIron, maxIron: maxIron, minMagnesium: minMagnesium, maxMagnesium: maxMagnesium, minManganese: minManganese, maxManganese: maxManganese, minPhosphorus: minPhosphorus, maxPhosphorus: maxPhosphorus, minPotassium: minPotassium, maxPotassium: maxPotassium, minSelenium: minSelenium, maxSelenium: maxSelenium, minSodium: minSodium, maxSodium: maxSodium, minSugar: minSugar, maxSugar: maxSugar, minZinc: minZinc, maxZinc: maxZinc, offset: offset, number: number, limitLicense: limitLicense).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search Recipes
     - GET /recipes/complexSearch
     - Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Search-Recipes
}
     - parameter query: (query) The (natural language) search query. (optional)
     - parameter cuisine: (query) The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines. (optional)
     - parameter excludeCuisine: (query) The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines. (optional)
     - parameter diet: (query) The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
     - parameter intolerances: (query) A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     - parameter equipment: (query) The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;. (optional)
     - parameter includeIngredients: (query) A comma-separated list of ingredients that should/must be used in the recipes. (optional)
     - parameter excludeIngredients: (query) A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     - parameter type: (query) The type of recipe. See a full list of supported meal types. (optional)
     - parameter instructionsRequired: (query) Whether the recipes must have instructions. (optional)
     - parameter fillIngredients: (query) Add information about the ingredients and whether they are used or missing in relation to the query. (optional)
     - parameter addRecipeInformation: (query) If set to true, you get more information about the recipes returned. (optional)
     - parameter addRecipeNutrition: (query) If set to true, you get nutritional information about each recipes returned. (optional)
     - parameter author: (query) The username of the recipe author. (optional)
     - parameter tags: (query) The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have. (optional)
     - parameter recipeBoxId: (query) The id of the recipe box to which the search should be limited to. (optional)
     - parameter titleMatch: (query) Enter text that must be found in the title of the recipes. (optional)
     - parameter maxReadyTime: (query) The maximum time in minutes it should take to prepare and cook the recipe. (optional)
     - parameter ignorePantry: (query) Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)
     - parameter sort: (query) The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     - parameter sortDirection: (query) The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
     - parameter minCarbs: (query) The minimum amount of carbohydrates in grams the recipe must have. (optional)
     - parameter maxCarbs: (query) The maximum amount of carbohydrates in grams the recipe can have. (optional)
     - parameter minProtein: (query) The minimum amount of protein in grams the recipe must have. (optional)
     - parameter maxProtein: (query) The maximum amount of protein in grams the recipe can have. (optional)
     - parameter minCalories: (query) The minimum amount of calories the recipe must have. (optional)
     - parameter maxCalories: (query) The maximum amount of calories the recipe can have. (optional)
     - parameter minFat: (query) The minimum amount of fat in grams the recipe must have. (optional)
     - parameter maxFat: (query) The maximum amount of fat in grams the recipe can have. (optional)
     - parameter minAlcohol: (query) The minimum amount of alcohol in grams the recipe must have. (optional)
     - parameter maxAlcohol: (query) The maximum amount of alcohol in grams the recipe can have. (optional)
     - parameter minCaffeine: (query) The minimum amount of caffeine in milligrams the recipe must have. (optional)
     - parameter maxCaffeine: (query) The maximum amount of caffeine in milligrams the recipe can have. (optional)
     - parameter minCopper: (query) The minimum amount of copper in milligrams the recipe must have. (optional)
     - parameter maxCopper: (query) The maximum amount of copper in milligrams the recipe can have. (optional)
     - parameter minCalcium: (query) The minimum amount of calcium in milligrams the recipe must have. (optional)
     - parameter maxCalcium: (query) The maximum amount of calcium in milligrams the recipe can have. (optional)
     - parameter minCholine: (query) The minimum amount of choline in milligrams the recipe must have. (optional)
     - parameter maxCholine: (query) The maximum amount of choline in milligrams the recipe can have. (optional)
     - parameter minCholesterol: (query) The minimum amount of cholesterol in milligrams the recipe must have. (optional)
     - parameter maxCholesterol: (query) The maximum amount of cholesterol in milligrams the recipe can have. (optional)
     - parameter minFluoride: (query) The minimum amount of fluoride in milligrams the recipe must have. (optional)
     - parameter maxFluoride: (query) The maximum amount of fluoride in milligrams the recipe can have. (optional)
     - parameter minSaturatedFat: (query) The minimum amount of saturated fat in grams the recipe must have. (optional)
     - parameter maxSaturatedFat: (query) The maximum amount of saturated fat in grams the recipe can have. (optional)
     - parameter minVitaminA: (query) The minimum amount of Vitamin A in IU the recipe must have. (optional)
     - parameter maxVitaminA: (query) The maximum amount of Vitamin A in IU the recipe can have. (optional)
     - parameter minVitaminC: (query) The minimum amount of Vitamin C milligrams the recipe must have. (optional)
     - parameter maxVitaminC: (query) The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
     - parameter minVitaminD: (query) The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
     - parameter maxVitaminD: (query) The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
     - parameter minVitaminE: (query) The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
     - parameter maxVitaminE: (query) The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
     - parameter minVitaminK: (query) The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
     - parameter maxVitaminK: (query) The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
     - parameter minVitaminB1: (query) The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
     - parameter maxVitaminB1: (query) The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
     - parameter minVitaminB2: (query) The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
     - parameter maxVitaminB2: (query) The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
     - parameter minVitaminB5: (query) The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
     - parameter maxVitaminB5: (query) The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
     - parameter minVitaminB3: (query) The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
     - parameter maxVitaminB3: (query) The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
     - parameter minVitaminB6: (query) The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
     - parameter maxVitaminB6: (query) The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
     - parameter minVitaminB12: (query) The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
     - parameter maxVitaminB12: (query) The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
     - parameter minFiber: (query) The minimum amount of fiber in grams the recipe must have. (optional)
     - parameter maxFiber: (query) The maximum amount of fiber in grams the recipe can have. (optional)
     - parameter minFolate: (query) The minimum amount of folate in micrograms the recipe must have. (optional)
     - parameter maxFolate: (query) The maximum amount of folate in micrograms the recipe can have. (optional)
     - parameter minFolicAcid: (query) The minimum amount of folic acid in micrograms the recipe must have. (optional)
     - parameter maxFolicAcid: (query) The maximum amount of folic acid in micrograms the recipe can have. (optional)
     - parameter minIodine: (query) The minimum amount of iodine in micrograms the recipe must have. (optional)
     - parameter maxIodine: (query) The maximum amount of iodine in micrograms the recipe can have. (optional)
     - parameter minIron: (query) The minimum amount of iron in milligrams the recipe must have. (optional)
     - parameter maxIron: (query) The maximum amount of iron in milligrams the recipe can have. (optional)
     - parameter minMagnesium: (query) The minimum amount of magnesium in milligrams the recipe must have. (optional)
     - parameter maxMagnesium: (query) The maximum amount of magnesium in milligrams the recipe can have. (optional)
     - parameter minManganese: (query) The minimum amount of manganese in milligrams the recipe must have. (optional)
     - parameter maxManganese: (query) The maximum amount of manganese in milligrams the recipe can have. (optional)
     - parameter minPhosphorus: (query) The minimum amount of phosphorus in milligrams the recipe must have. (optional)
     - parameter maxPhosphorus: (query) The maximum amount of phosphorus in milligrams the recipe can have. (optional)
     - parameter minPotassium: (query) The minimum amount of potassium in milligrams the recipe must have. (optional)
     - parameter maxPotassium: (query) The maximum amount of potassium in milligrams the recipe can have. (optional)
     - parameter minSelenium: (query) The minimum amount of selenium in micrograms the recipe must have. (optional)
     - parameter maxSelenium: (query) The maximum amount of selenium in micrograms the recipe can have. (optional)
     - parameter minSodium: (query) The minimum amount of sodium in milligrams the recipe must have. (optional)
     - parameter maxSodium: (query) The maximum amount of sodium in milligrams the recipe can have. (optional)
     - parameter minSugar: (query) The minimum amount of sugar in grams the recipe must have. (optional)
     - parameter maxSugar: (query) The maximum amount of sugar in grams the recipe can have. (optional)
     - parameter minZinc: (query) The minimum amount of zinc in milligrams the recipe must have. (optional)
     - parameter maxZinc: (query) The maximum amount of zinc in milligrams the recipe can have. (optional)
     - parameter offset: (query) The number of results to skip (between 0 and 900). (optional)
     - parameter number: (query) The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     - parameter limitLicense: (query) Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     - returns: RequestBuilder<SearchRecipes200Response> 
     */
    open class func searchRecipesWithRequestBuilder(query: String? = nil, cuisine: String? = nil, excludeCuisine: String? = nil, diet: String? = nil, intolerances: String? = nil, equipment: String? = nil, includeIngredients: String? = nil, excludeIngredients: String? = nil, type: String? = nil, instructionsRequired: Bool? = nil, fillIngredients: Bool? = nil, addRecipeInformation: Bool? = nil, addRecipeNutrition: Bool? = nil, author: String? = nil, tags: String? = nil, recipeBoxId: Double? = nil, titleMatch: String? = nil, maxReadyTime: Double? = nil, ignorePantry: Bool? = nil, sort: String? = nil, sortDirection: String? = nil, minCarbs: Double? = nil, maxCarbs: Double? = nil, minProtein: Double? = nil, maxProtein: Double? = nil, minCalories: Double? = nil, maxCalories: Double? = nil, minFat: Double? = nil, maxFat: Double? = nil, minAlcohol: Double? = nil, maxAlcohol: Double? = nil, minCaffeine: Double? = nil, maxCaffeine: Double? = nil, minCopper: Double? = nil, maxCopper: Double? = nil, minCalcium: Double? = nil, maxCalcium: Double? = nil, minCholine: Double? = nil, maxCholine: Double? = nil, minCholesterol: Double? = nil, maxCholesterol: Double? = nil, minFluoride: Double? = nil, maxFluoride: Double? = nil, minSaturatedFat: Double? = nil, maxSaturatedFat: Double? = nil, minVitaminA: Double? = nil, maxVitaminA: Double? = nil, minVitaminC: Double? = nil, maxVitaminC: Double? = nil, minVitaminD: Double? = nil, maxVitaminD: Double? = nil, minVitaminE: Double? = nil, maxVitaminE: Double? = nil, minVitaminK: Double? = nil, maxVitaminK: Double? = nil, minVitaminB1: Double? = nil, maxVitaminB1: Double? = nil, minVitaminB2: Double? = nil, maxVitaminB2: Double? = nil, minVitaminB5: Double? = nil, maxVitaminB5: Double? = nil, minVitaminB3: Double? = nil, maxVitaminB3: Double? = nil, minVitaminB6: Double? = nil, maxVitaminB6: Double? = nil, minVitaminB12: Double? = nil, maxVitaminB12: Double? = nil, minFiber: Double? = nil, maxFiber: Double? = nil, minFolate: Double? = nil, maxFolate: Double? = nil, minFolicAcid: Double? = nil, maxFolicAcid: Double? = nil, minIodine: Double? = nil, maxIodine: Double? = nil, minIron: Double? = nil, maxIron: Double? = nil, minMagnesium: Double? = nil, maxMagnesium: Double? = nil, minManganese: Double? = nil, maxManganese: Double? = nil, minPhosphorus: Double? = nil, maxPhosphorus: Double? = nil, minPotassium: Double? = nil, maxPotassium: Double? = nil, minSelenium: Double? = nil, maxSelenium: Double? = nil, minSodium: Double? = nil, maxSodium: Double? = nil, minSugar: Double? = nil, maxSugar: Double? = nil, minZinc: Double? = nil, maxZinc: Double? = nil, offset: Int? = nil, number: Int? = nil, limitLicense: Bool? = nil) -> RequestBuilder<SearchRecipes200Response> {
        let localVariablePath = "/recipes/complexSearch"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": (wrappedValue: query?.encodeToJSON(), isExplode: true),
            "cuisine": (wrappedValue: cuisine?.encodeToJSON(), isExplode: false),
            "excludeCuisine": (wrappedValue: excludeCuisine?.encodeToJSON(), isExplode: false),
            "diet": (wrappedValue: diet?.encodeToJSON(), isExplode: false),
            "intolerances": (wrappedValue: intolerances?.encodeToJSON(), isExplode: false),
            "equipment": (wrappedValue: equipment?.encodeToJSON(), isExplode: false),
            "includeIngredients": (wrappedValue: includeIngredients?.encodeToJSON(), isExplode: false),
            "excludeIngredients": (wrappedValue: excludeIngredients?.encodeToJSON(), isExplode: false),
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: false),
            "instructionsRequired": (wrappedValue: instructionsRequired?.encodeToJSON(), isExplode: false),
            "fillIngredients": (wrappedValue: fillIngredients?.encodeToJSON(), isExplode: false),
            "addRecipeInformation": (wrappedValue: addRecipeInformation?.encodeToJSON(), isExplode: false),
            "addRecipeNutrition": (wrappedValue: addRecipeNutrition?.encodeToJSON(), isExplode: false),
            "author": (wrappedValue: author?.encodeToJSON(), isExplode: false),
            "tags": (wrappedValue: tags?.encodeToJSON(), isExplode: true),
            "recipeBoxId": (wrappedValue: recipeBoxId?.encodeToJSON(), isExplode: false),
            "titleMatch": (wrappedValue: titleMatch?.encodeToJSON(), isExplode: false),
            "maxReadyTime": (wrappedValue: maxReadyTime?.encodeToJSON(), isExplode: false),
            "ignorePantry": (wrappedValue: ignorePantry?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "sortDirection": (wrappedValue: sortDirection?.encodeToJSON(), isExplode: false),
            "minCarbs": (wrappedValue: minCarbs?.encodeToJSON(), isExplode: false),
            "maxCarbs": (wrappedValue: maxCarbs?.encodeToJSON(), isExplode: false),
            "minProtein": (wrappedValue: minProtein?.encodeToJSON(), isExplode: false),
            "maxProtein": (wrappedValue: maxProtein?.encodeToJSON(), isExplode: false),
            "minCalories": (wrappedValue: minCalories?.encodeToJSON(), isExplode: false),
            "maxCalories": (wrappedValue: maxCalories?.encodeToJSON(), isExplode: false),
            "minFat": (wrappedValue: minFat?.encodeToJSON(), isExplode: false),
            "maxFat": (wrappedValue: maxFat?.encodeToJSON(), isExplode: false),
            "minAlcohol": (wrappedValue: minAlcohol?.encodeToJSON(), isExplode: false),
            "maxAlcohol": (wrappedValue: maxAlcohol?.encodeToJSON(), isExplode: false),
            "minCaffeine": (wrappedValue: minCaffeine?.encodeToJSON(), isExplode: false),
            "maxCaffeine": (wrappedValue: maxCaffeine?.encodeToJSON(), isExplode: false),
            "minCopper": (wrappedValue: minCopper?.encodeToJSON(), isExplode: false),
            "maxCopper": (wrappedValue: maxCopper?.encodeToJSON(), isExplode: false),
            "minCalcium": (wrappedValue: minCalcium?.encodeToJSON(), isExplode: false),
            "maxCalcium": (wrappedValue: maxCalcium?.encodeToJSON(), isExplode: false),
            "minCholine": (wrappedValue: minCholine?.encodeToJSON(), isExplode: false),
            "maxCholine": (wrappedValue: maxCholine?.encodeToJSON(), isExplode: false),
            "minCholesterol": (wrappedValue: minCholesterol?.encodeToJSON(), isExplode: false),
            "maxCholesterol": (wrappedValue: maxCholesterol?.encodeToJSON(), isExplode: false),
            "minFluoride": (wrappedValue: minFluoride?.encodeToJSON(), isExplode: false),
            "maxFluoride": (wrappedValue: maxFluoride?.encodeToJSON(), isExplode: false),
            "minSaturatedFat": (wrappedValue: minSaturatedFat?.encodeToJSON(), isExplode: false),
            "maxSaturatedFat": (wrappedValue: maxSaturatedFat?.encodeToJSON(), isExplode: false),
            "minVitaminA": (wrappedValue: minVitaminA?.encodeToJSON(), isExplode: false),
            "maxVitaminA": (wrappedValue: maxVitaminA?.encodeToJSON(), isExplode: false),
            "minVitaminC": (wrappedValue: minVitaminC?.encodeToJSON(), isExplode: false),
            "maxVitaminC": (wrappedValue: maxVitaminC?.encodeToJSON(), isExplode: false),
            "minVitaminD": (wrappedValue: minVitaminD?.encodeToJSON(), isExplode: false),
            "maxVitaminD": (wrappedValue: maxVitaminD?.encodeToJSON(), isExplode: false),
            "minVitaminE": (wrappedValue: minVitaminE?.encodeToJSON(), isExplode: false),
            "maxVitaminE": (wrappedValue: maxVitaminE?.encodeToJSON(), isExplode: false),
            "minVitaminK": (wrappedValue: minVitaminK?.encodeToJSON(), isExplode: false),
            "maxVitaminK": (wrappedValue: maxVitaminK?.encodeToJSON(), isExplode: false),
            "minVitaminB1": (wrappedValue: minVitaminB1?.encodeToJSON(), isExplode: false),
            "maxVitaminB1": (wrappedValue: maxVitaminB1?.encodeToJSON(), isExplode: false),
            "minVitaminB2": (wrappedValue: minVitaminB2?.encodeToJSON(), isExplode: false),
            "maxVitaminB2": (wrappedValue: maxVitaminB2?.encodeToJSON(), isExplode: false),
            "minVitaminB5": (wrappedValue: minVitaminB5?.encodeToJSON(), isExplode: false),
            "maxVitaminB5": (wrappedValue: maxVitaminB5?.encodeToJSON(), isExplode: false),
            "minVitaminB3": (wrappedValue: minVitaminB3?.encodeToJSON(), isExplode: false),
            "maxVitaminB3": (wrappedValue: maxVitaminB3?.encodeToJSON(), isExplode: false),
            "minVitaminB6": (wrappedValue: minVitaminB6?.encodeToJSON(), isExplode: false),
            "maxVitaminB6": (wrappedValue: maxVitaminB6?.encodeToJSON(), isExplode: false),
            "minVitaminB12": (wrappedValue: minVitaminB12?.encodeToJSON(), isExplode: false),
            "maxVitaminB12": (wrappedValue: maxVitaminB12?.encodeToJSON(), isExplode: false),
            "minFiber": (wrappedValue: minFiber?.encodeToJSON(), isExplode: false),
            "maxFiber": (wrappedValue: maxFiber?.encodeToJSON(), isExplode: false),
            "minFolate": (wrappedValue: minFolate?.encodeToJSON(), isExplode: false),
            "maxFolate": (wrappedValue: maxFolate?.encodeToJSON(), isExplode: false),
            "minFolicAcid": (wrappedValue: minFolicAcid?.encodeToJSON(), isExplode: false),
            "maxFolicAcid": (wrappedValue: maxFolicAcid?.encodeToJSON(), isExplode: false),
            "minIodine": (wrappedValue: minIodine?.encodeToJSON(), isExplode: false),
            "maxIodine": (wrappedValue: maxIodine?.encodeToJSON(), isExplode: false),
            "minIron": (wrappedValue: minIron?.encodeToJSON(), isExplode: false),
            "maxIron": (wrappedValue: maxIron?.encodeToJSON(), isExplode: false),
            "minMagnesium": (wrappedValue: minMagnesium?.encodeToJSON(), isExplode: false),
            "maxMagnesium": (wrappedValue: maxMagnesium?.encodeToJSON(), isExplode: false),
            "minManganese": (wrappedValue: minManganese?.encodeToJSON(), isExplode: false),
            "maxManganese": (wrappedValue: maxManganese?.encodeToJSON(), isExplode: false),
            "minPhosphorus": (wrappedValue: minPhosphorus?.encodeToJSON(), isExplode: false),
            "maxPhosphorus": (wrappedValue: maxPhosphorus?.encodeToJSON(), isExplode: false),
            "minPotassium": (wrappedValue: minPotassium?.encodeToJSON(), isExplode: false),
            "maxPotassium": (wrappedValue: maxPotassium?.encodeToJSON(), isExplode: false),
            "minSelenium": (wrappedValue: minSelenium?.encodeToJSON(), isExplode: false),
            "maxSelenium": (wrappedValue: maxSelenium?.encodeToJSON(), isExplode: false),
            "minSodium": (wrappedValue: minSodium?.encodeToJSON(), isExplode: false),
            "maxSodium": (wrappedValue: maxSodium?.encodeToJSON(), isExplode: false),
            "minSugar": (wrappedValue: minSugar?.encodeToJSON(), isExplode: false),
            "maxSugar": (wrappedValue: maxSugar?.encodeToJSON(), isExplode: false),
            "minZinc": (wrappedValue: minZinc?.encodeToJSON(), isExplode: false),
            "maxZinc": (wrappedValue: maxZinc?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
            "number": (wrappedValue: number?.encodeToJSON(), isExplode: true),
            "limitLicense": (wrappedValue: limitLicense?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchRecipes200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Search Recipes by Ingredients
     
     - parameter ingredients: (query) A comma-separated list of ingredients that the recipes should contain. (optional)
     - parameter number: (query) The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     - parameter limitLicense: (query) Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     - parameter ranking: (query) Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)
     - parameter ignorePantry: (query) Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func searchRecipesByIngredients(ingredients: String? = nil, number: Int? = nil, limitLicense: Bool? = nil, ranking: Double? = nil, ignorePantry: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Set<SearchRecipesByIngredients200ResponseInner>?, _ error: Error?) -> Void)) -> RequestTask {
        return searchRecipesByIngredientsWithRequestBuilder(ingredients: ingredients, number: number, limitLicense: limitLicense, ranking: ranking, ignorePantry: ignorePantry).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search Recipes by Ingredients
     - GET /recipes/findByIngredients
     -  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don't currently have (post shopping).         
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Search-Recipes-by-Ingredients
}
     - parameter ingredients: (query) A comma-separated list of ingredients that the recipes should contain. (optional)
     - parameter number: (query) The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     - parameter limitLicense: (query) Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     - parameter ranking: (query) Whether to maximize used ingredients (1) or minimize missing ingredients (2) first. (optional)
     - parameter ignorePantry: (query) Whether to ignore typical pantry items, such as water, salt, flour, etc. (optional, default to false)
     - returns: RequestBuilder<Set<SearchRecipesByIngredients200ResponseInner>> 
     */
    open class func searchRecipesByIngredientsWithRequestBuilder(ingredients: String? = nil, number: Int? = nil, limitLicense: Bool? = nil, ranking: Double? = nil, ignorePantry: Bool? = nil) -> RequestBuilder<Set<SearchRecipesByIngredients200ResponseInner>> {
        let localVariablePath = "/recipes/findByIngredients"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ingredients": (wrappedValue: ingredients?.encodeToJSON(), isExplode: true),
            "number": (wrappedValue: number?.encodeToJSON(), isExplode: true),
            "limitLicense": (wrappedValue: limitLicense?.encodeToJSON(), isExplode: true),
            "ranking": (wrappedValue: ranking?.encodeToJSON(), isExplode: false),
            "ignorePantry": (wrappedValue: ignorePantry?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Set<SearchRecipesByIngredients200ResponseInner>>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Search Recipes by Nutrients
     
     - parameter minCarbs: (query) The minimum amount of carbohydrates in grams the recipe must have. (optional)
     - parameter maxCarbs: (query) The maximum amount of carbohydrates in grams the recipe can have. (optional)
     - parameter minProtein: (query) The minimum amount of protein in grams the recipe must have. (optional)
     - parameter maxProtein: (query) The maximum amount of protein in grams the recipe can have. (optional)
     - parameter minCalories: (query) The minimum amount of calories the recipe must have. (optional)
     - parameter maxCalories: (query) The maximum amount of calories the recipe can have. (optional)
     - parameter minFat: (query) The minimum amount of fat in grams the recipe must have. (optional)
     - parameter maxFat: (query) The maximum amount of fat in grams the recipe can have. (optional)
     - parameter minAlcohol: (query) The minimum amount of alcohol in grams the recipe must have. (optional)
     - parameter maxAlcohol: (query) The maximum amount of alcohol in grams the recipe can have. (optional)
     - parameter minCaffeine: (query) The minimum amount of caffeine in milligrams the recipe must have. (optional)
     - parameter maxCaffeine: (query) The maximum amount of caffeine in milligrams the recipe can have. (optional)
     - parameter minCopper: (query) The minimum amount of copper in milligrams the recipe must have. (optional)
     - parameter maxCopper: (query) The maximum amount of copper in milligrams the recipe can have. (optional)
     - parameter minCalcium: (query) The minimum amount of calcium in milligrams the recipe must have. (optional)
     - parameter maxCalcium: (query) The maximum amount of calcium in milligrams the recipe can have. (optional)
     - parameter minCholine: (query) The minimum amount of choline in milligrams the recipe must have. (optional)
     - parameter maxCholine: (query) The maximum amount of choline in milligrams the recipe can have. (optional)
     - parameter minCholesterol: (query) The minimum amount of cholesterol in milligrams the recipe must have. (optional)
     - parameter maxCholesterol: (query) The maximum amount of cholesterol in milligrams the recipe can have. (optional)
     - parameter minFluoride: (query) The minimum amount of fluoride in milligrams the recipe must have. (optional)
     - parameter maxFluoride: (query) The maximum amount of fluoride in milligrams the recipe can have. (optional)
     - parameter minSaturatedFat: (query) The minimum amount of saturated fat in grams the recipe must have. (optional)
     - parameter maxSaturatedFat: (query) The maximum amount of saturated fat in grams the recipe can have. (optional)
     - parameter minVitaminA: (query) The minimum amount of Vitamin A in IU the recipe must have. (optional)
     - parameter maxVitaminA: (query) The maximum amount of Vitamin A in IU the recipe can have. (optional)
     - parameter minVitaminC: (query) The minimum amount of Vitamin C in milligrams the recipe must have. (optional)
     - parameter maxVitaminC: (query) The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
     - parameter minVitaminD: (query) The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
     - parameter maxVitaminD: (query) The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
     - parameter minVitaminE: (query) The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
     - parameter maxVitaminE: (query) The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
     - parameter minVitaminK: (query) The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
     - parameter maxVitaminK: (query) The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
     - parameter minVitaminB1: (query) The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
     - parameter maxVitaminB1: (query) The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
     - parameter minVitaminB2: (query) The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
     - parameter maxVitaminB2: (query) The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
     - parameter minVitaminB5: (query) The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
     - parameter maxVitaminB5: (query) The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
     - parameter minVitaminB3: (query) The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
     - parameter maxVitaminB3: (query) The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
     - parameter minVitaminB6: (query) The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
     - parameter maxVitaminB6: (query) The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
     - parameter minVitaminB12: (query) The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
     - parameter maxVitaminB12: (query) The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
     - parameter minFiber: (query) The minimum amount of fiber in grams the recipe must have. (optional)
     - parameter maxFiber: (query) The maximum amount of fiber in grams the recipe can have. (optional)
     - parameter minFolate: (query) The minimum amount of folate in micrograms the recipe must have. (optional)
     - parameter maxFolate: (query) The maximum amount of folate in micrograms the recipe can have. (optional)
     - parameter minFolicAcid: (query) The minimum amount of folic acid in micrograms the recipe must have. (optional)
     - parameter maxFolicAcid: (query) The maximum amount of folic acid in micrograms the recipe can have. (optional)
     - parameter minIodine: (query) The minimum amount of iodine in micrograms the recipe must have. (optional)
     - parameter maxIodine: (query) The maximum amount of iodine in micrograms the recipe can have. (optional)
     - parameter minIron: (query) The minimum amount of iron in milligrams the recipe must have. (optional)
     - parameter maxIron: (query) The maximum amount of iron in milligrams the recipe can have. (optional)
     - parameter minMagnesium: (query) The minimum amount of magnesium in milligrams the recipe must have. (optional)
     - parameter maxMagnesium: (query) The maximum amount of magnesium in milligrams the recipe can have. (optional)
     - parameter minManganese: (query) The minimum amount of manganese in milligrams the recipe must have. (optional)
     - parameter maxManganese: (query) The maximum amount of manganese in milligrams the recipe can have. (optional)
     - parameter minPhosphorus: (query) The minimum amount of phosphorus in milligrams the recipe must have. (optional)
     - parameter maxPhosphorus: (query) The maximum amount of phosphorus in milligrams the recipe can have. (optional)
     - parameter minPotassium: (query) The minimum amount of potassium in milligrams the recipe must have. (optional)
     - parameter maxPotassium: (query) The maximum amount of potassium in milligrams the recipe can have. (optional)
     - parameter minSelenium: (query) The minimum amount of selenium in micrograms the recipe must have. (optional)
     - parameter maxSelenium: (query) The maximum amount of selenium in micrograms the recipe can have. (optional)
     - parameter minSodium: (query) The minimum amount of sodium in milligrams the recipe must have. (optional)
     - parameter maxSodium: (query) The maximum amount of sodium in milligrams the recipe can have. (optional)
     - parameter minSugar: (query) The minimum amount of sugar in grams the recipe must have. (optional)
     - parameter maxSugar: (query) The maximum amount of sugar in grams the recipe can have. (optional)
     - parameter minZinc: (query) The minimum amount of zinc in milligrams the recipe must have. (optional)
     - parameter maxZinc: (query) The maximum amount of zinc in milligrams the recipe can have. (optional)
     - parameter offset: (query) The number of results to skip (between 0 and 900). (optional)
     - parameter number: (query) The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     - parameter random: (query) If true, every request will give you a random set of recipes within the requested limits. (optional)
     - parameter limitLicense: (query) Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func searchRecipesByNutrients(minCarbs: Double? = nil, maxCarbs: Double? = nil, minProtein: Double? = nil, maxProtein: Double? = nil, minCalories: Double? = nil, maxCalories: Double? = nil, minFat: Double? = nil, maxFat: Double? = nil, minAlcohol: Double? = nil, maxAlcohol: Double? = nil, minCaffeine: Double? = nil, maxCaffeine: Double? = nil, minCopper: Double? = nil, maxCopper: Double? = nil, minCalcium: Double? = nil, maxCalcium: Double? = nil, minCholine: Double? = nil, maxCholine: Double? = nil, minCholesterol: Double? = nil, maxCholesterol: Double? = nil, minFluoride: Double? = nil, maxFluoride: Double? = nil, minSaturatedFat: Double? = nil, maxSaturatedFat: Double? = nil, minVitaminA: Double? = nil, maxVitaminA: Double? = nil, minVitaminC: Double? = nil, maxVitaminC: Double? = nil, minVitaminD: Double? = nil, maxVitaminD: Double? = nil, minVitaminE: Double? = nil, maxVitaminE: Double? = nil, minVitaminK: Double? = nil, maxVitaminK: Double? = nil, minVitaminB1: Double? = nil, maxVitaminB1: Double? = nil, minVitaminB2: Double? = nil, maxVitaminB2: Double? = nil, minVitaminB5: Double? = nil, maxVitaminB5: Double? = nil, minVitaminB3: Double? = nil, maxVitaminB3: Double? = nil, minVitaminB6: Double? = nil, maxVitaminB6: Double? = nil, minVitaminB12: Double? = nil, maxVitaminB12: Double? = nil, minFiber: Double? = nil, maxFiber: Double? = nil, minFolate: Double? = nil, maxFolate: Double? = nil, minFolicAcid: Double? = nil, maxFolicAcid: Double? = nil, minIodine: Double? = nil, maxIodine: Double? = nil, minIron: Double? = nil, maxIron: Double? = nil, minMagnesium: Double? = nil, maxMagnesium: Double? = nil, minManganese: Double? = nil, maxManganese: Double? = nil, minPhosphorus: Double? = nil, maxPhosphorus: Double? = nil, minPotassium: Double? = nil, maxPotassium: Double? = nil, minSelenium: Double? = nil, maxSelenium: Double? = nil, minSodium: Double? = nil, maxSodium: Double? = nil, minSugar: Double? = nil, maxSugar: Double? = nil, minZinc: Double? = nil, maxZinc: Double? = nil, offset: Int? = nil, number: Int? = nil, random: Bool? = nil, limitLicense: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Set<SearchRecipesByNutrients200ResponseInner>?, _ error: Error?) -> Void)) -> RequestTask {
        return searchRecipesByNutrientsWithRequestBuilder(minCarbs: minCarbs, maxCarbs: maxCarbs, minProtein: minProtein, maxProtein: maxProtein, minCalories: minCalories, maxCalories: maxCalories, minFat: minFat, maxFat: maxFat, minAlcohol: minAlcohol, maxAlcohol: maxAlcohol, minCaffeine: minCaffeine, maxCaffeine: maxCaffeine, minCopper: minCopper, maxCopper: maxCopper, minCalcium: minCalcium, maxCalcium: maxCalcium, minCholine: minCholine, maxCholine: maxCholine, minCholesterol: minCholesterol, maxCholesterol: maxCholesterol, minFluoride: minFluoride, maxFluoride: maxFluoride, minSaturatedFat: minSaturatedFat, maxSaturatedFat: maxSaturatedFat, minVitaminA: minVitaminA, maxVitaminA: maxVitaminA, minVitaminC: minVitaminC, maxVitaminC: maxVitaminC, minVitaminD: minVitaminD, maxVitaminD: maxVitaminD, minVitaminE: minVitaminE, maxVitaminE: maxVitaminE, minVitaminK: minVitaminK, maxVitaminK: maxVitaminK, minVitaminB1: minVitaminB1, maxVitaminB1: maxVitaminB1, minVitaminB2: minVitaminB2, maxVitaminB2: maxVitaminB2, minVitaminB5: minVitaminB5, maxVitaminB5: maxVitaminB5, minVitaminB3: minVitaminB3, maxVitaminB3: maxVitaminB3, minVitaminB6: minVitaminB6, maxVitaminB6: maxVitaminB6, minVitaminB12: minVitaminB12, maxVitaminB12: maxVitaminB12, minFiber: minFiber, maxFiber: maxFiber, minFolate: minFolate, maxFolate: maxFolate, minFolicAcid: minFolicAcid, maxFolicAcid: maxFolicAcid, minIodine: minIodine, maxIodine: maxIodine, minIron: minIron, maxIron: maxIron, minMagnesium: minMagnesium, maxMagnesium: maxMagnesium, minManganese: minManganese, maxManganese: maxManganese, minPhosphorus: minPhosphorus, maxPhosphorus: maxPhosphorus, minPotassium: minPotassium, maxPotassium: maxPotassium, minSelenium: minSelenium, maxSelenium: maxSelenium, minSodium: minSodium, maxSodium: maxSodium, minSugar: minSugar, maxSugar: maxSugar, minZinc: minZinc, maxZinc: maxZinc, offset: offset, number: number, random: random, limitLicense: limitLicense).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search Recipes by Nutrients
     - GET /recipes/findByNutrients
     - Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Search-Recipes-by-Nutrients
}
     - parameter minCarbs: (query) The minimum amount of carbohydrates in grams the recipe must have. (optional)
     - parameter maxCarbs: (query) The maximum amount of carbohydrates in grams the recipe can have. (optional)
     - parameter minProtein: (query) The minimum amount of protein in grams the recipe must have. (optional)
     - parameter maxProtein: (query) The maximum amount of protein in grams the recipe can have. (optional)
     - parameter minCalories: (query) The minimum amount of calories the recipe must have. (optional)
     - parameter maxCalories: (query) The maximum amount of calories the recipe can have. (optional)
     - parameter minFat: (query) The minimum amount of fat in grams the recipe must have. (optional)
     - parameter maxFat: (query) The maximum amount of fat in grams the recipe can have. (optional)
     - parameter minAlcohol: (query) The minimum amount of alcohol in grams the recipe must have. (optional)
     - parameter maxAlcohol: (query) The maximum amount of alcohol in grams the recipe can have. (optional)
     - parameter minCaffeine: (query) The minimum amount of caffeine in milligrams the recipe must have. (optional)
     - parameter maxCaffeine: (query) The maximum amount of caffeine in milligrams the recipe can have. (optional)
     - parameter minCopper: (query) The minimum amount of copper in milligrams the recipe must have. (optional)
     - parameter maxCopper: (query) The maximum amount of copper in milligrams the recipe can have. (optional)
     - parameter minCalcium: (query) The minimum amount of calcium in milligrams the recipe must have. (optional)
     - parameter maxCalcium: (query) The maximum amount of calcium in milligrams the recipe can have. (optional)
     - parameter minCholine: (query) The minimum amount of choline in milligrams the recipe must have. (optional)
     - parameter maxCholine: (query) The maximum amount of choline in milligrams the recipe can have. (optional)
     - parameter minCholesterol: (query) The minimum amount of cholesterol in milligrams the recipe must have. (optional)
     - parameter maxCholesterol: (query) The maximum amount of cholesterol in milligrams the recipe can have. (optional)
     - parameter minFluoride: (query) The minimum amount of fluoride in milligrams the recipe must have. (optional)
     - parameter maxFluoride: (query) The maximum amount of fluoride in milligrams the recipe can have. (optional)
     - parameter minSaturatedFat: (query) The minimum amount of saturated fat in grams the recipe must have. (optional)
     - parameter maxSaturatedFat: (query) The maximum amount of saturated fat in grams the recipe can have. (optional)
     - parameter minVitaminA: (query) The minimum amount of Vitamin A in IU the recipe must have. (optional)
     - parameter maxVitaminA: (query) The maximum amount of Vitamin A in IU the recipe can have. (optional)
     - parameter minVitaminC: (query) The minimum amount of Vitamin C in milligrams the recipe must have. (optional)
     - parameter maxVitaminC: (query) The maximum amount of Vitamin C in milligrams the recipe can have. (optional)
     - parameter minVitaminD: (query) The minimum amount of Vitamin D in micrograms the recipe must have. (optional)
     - parameter maxVitaminD: (query) The maximum amount of Vitamin D in micrograms the recipe can have. (optional)
     - parameter minVitaminE: (query) The minimum amount of Vitamin E in milligrams the recipe must have. (optional)
     - parameter maxVitaminE: (query) The maximum amount of Vitamin E in milligrams the recipe can have. (optional)
     - parameter minVitaminK: (query) The minimum amount of Vitamin K in micrograms the recipe must have. (optional)
     - parameter maxVitaminK: (query) The maximum amount of Vitamin K in micrograms the recipe can have. (optional)
     - parameter minVitaminB1: (query) The minimum amount of Vitamin B1 in milligrams the recipe must have. (optional)
     - parameter maxVitaminB1: (query) The maximum amount of Vitamin B1 in milligrams the recipe can have. (optional)
     - parameter minVitaminB2: (query) The minimum amount of Vitamin B2 in milligrams the recipe must have. (optional)
     - parameter maxVitaminB2: (query) The maximum amount of Vitamin B2 in milligrams the recipe can have. (optional)
     - parameter minVitaminB5: (query) The minimum amount of Vitamin B5 in milligrams the recipe must have. (optional)
     - parameter maxVitaminB5: (query) The maximum amount of Vitamin B5 in milligrams the recipe can have. (optional)
     - parameter minVitaminB3: (query) The minimum amount of Vitamin B3 in milligrams the recipe must have. (optional)
     - parameter maxVitaminB3: (query) The maximum amount of Vitamin B3 in milligrams the recipe can have. (optional)
     - parameter minVitaminB6: (query) The minimum amount of Vitamin B6 in milligrams the recipe must have. (optional)
     - parameter maxVitaminB6: (query) The maximum amount of Vitamin B6 in milligrams the recipe can have. (optional)
     - parameter minVitaminB12: (query) The minimum amount of Vitamin B12 in micrograms the recipe must have. (optional)
     - parameter maxVitaminB12: (query) The maximum amount of Vitamin B12 in micrograms the recipe can have. (optional)
     - parameter minFiber: (query) The minimum amount of fiber in grams the recipe must have. (optional)
     - parameter maxFiber: (query) The maximum amount of fiber in grams the recipe can have. (optional)
     - parameter minFolate: (query) The minimum amount of folate in micrograms the recipe must have. (optional)
     - parameter maxFolate: (query) The maximum amount of folate in micrograms the recipe can have. (optional)
     - parameter minFolicAcid: (query) The minimum amount of folic acid in micrograms the recipe must have. (optional)
     - parameter maxFolicAcid: (query) The maximum amount of folic acid in micrograms the recipe can have. (optional)
     - parameter minIodine: (query) The minimum amount of iodine in micrograms the recipe must have. (optional)
     - parameter maxIodine: (query) The maximum amount of iodine in micrograms the recipe can have. (optional)
     - parameter minIron: (query) The minimum amount of iron in milligrams the recipe must have. (optional)
     - parameter maxIron: (query) The maximum amount of iron in milligrams the recipe can have. (optional)
     - parameter minMagnesium: (query) The minimum amount of magnesium in milligrams the recipe must have. (optional)
     - parameter maxMagnesium: (query) The maximum amount of magnesium in milligrams the recipe can have. (optional)
     - parameter minManganese: (query) The minimum amount of manganese in milligrams the recipe must have. (optional)
     - parameter maxManganese: (query) The maximum amount of manganese in milligrams the recipe can have. (optional)
     - parameter minPhosphorus: (query) The minimum amount of phosphorus in milligrams the recipe must have. (optional)
     - parameter maxPhosphorus: (query) The maximum amount of phosphorus in milligrams the recipe can have. (optional)
     - parameter minPotassium: (query) The minimum amount of potassium in milligrams the recipe must have. (optional)
     - parameter maxPotassium: (query) The maximum amount of potassium in milligrams the recipe can have. (optional)
     - parameter minSelenium: (query) The minimum amount of selenium in micrograms the recipe must have. (optional)
     - parameter maxSelenium: (query) The maximum amount of selenium in micrograms the recipe can have. (optional)
     - parameter minSodium: (query) The minimum amount of sodium in milligrams the recipe must have. (optional)
     - parameter maxSodium: (query) The maximum amount of sodium in milligrams the recipe can have. (optional)
     - parameter minSugar: (query) The minimum amount of sugar in grams the recipe must have. (optional)
     - parameter maxSugar: (query) The maximum amount of sugar in grams the recipe can have. (optional)
     - parameter minZinc: (query) The minimum amount of zinc in milligrams the recipe must have. (optional)
     - parameter maxZinc: (query) The maximum amount of zinc in milligrams the recipe can have. (optional)
     - parameter offset: (query) The number of results to skip (between 0 and 900). (optional)
     - parameter number: (query) The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     - parameter random: (query) If true, every request will give you a random set of recipes within the requested limits. (optional)
     - parameter limitLicense: (query) Whether the recipes should have an open license that allows display with proper attribution. (optional, default to true)
     - returns: RequestBuilder<Set<SearchRecipesByNutrients200ResponseInner>> 
     */
    open class func searchRecipesByNutrientsWithRequestBuilder(minCarbs: Double? = nil, maxCarbs: Double? = nil, minProtein: Double? = nil, maxProtein: Double? = nil, minCalories: Double? = nil, maxCalories: Double? = nil, minFat: Double? = nil, maxFat: Double? = nil, minAlcohol: Double? = nil, maxAlcohol: Double? = nil, minCaffeine: Double? = nil, maxCaffeine: Double? = nil, minCopper: Double? = nil, maxCopper: Double? = nil, minCalcium: Double? = nil, maxCalcium: Double? = nil, minCholine: Double? = nil, maxCholine: Double? = nil, minCholesterol: Double? = nil, maxCholesterol: Double? = nil, minFluoride: Double? = nil, maxFluoride: Double? = nil, minSaturatedFat: Double? = nil, maxSaturatedFat: Double? = nil, minVitaminA: Double? = nil, maxVitaminA: Double? = nil, minVitaminC: Double? = nil, maxVitaminC: Double? = nil, minVitaminD: Double? = nil, maxVitaminD: Double? = nil, minVitaminE: Double? = nil, maxVitaminE: Double? = nil, minVitaminK: Double? = nil, maxVitaminK: Double? = nil, minVitaminB1: Double? = nil, maxVitaminB1: Double? = nil, minVitaminB2: Double? = nil, maxVitaminB2: Double? = nil, minVitaminB5: Double? = nil, maxVitaminB5: Double? = nil, minVitaminB3: Double? = nil, maxVitaminB3: Double? = nil, minVitaminB6: Double? = nil, maxVitaminB6: Double? = nil, minVitaminB12: Double? = nil, maxVitaminB12: Double? = nil, minFiber: Double? = nil, maxFiber: Double? = nil, minFolate: Double? = nil, maxFolate: Double? = nil, minFolicAcid: Double? = nil, maxFolicAcid: Double? = nil, minIodine: Double? = nil, maxIodine: Double? = nil, minIron: Double? = nil, maxIron: Double? = nil, minMagnesium: Double? = nil, maxMagnesium: Double? = nil, minManganese: Double? = nil, maxManganese: Double? = nil, minPhosphorus: Double? = nil, maxPhosphorus: Double? = nil, minPotassium: Double? = nil, maxPotassium: Double? = nil, minSelenium: Double? = nil, maxSelenium: Double? = nil, minSodium: Double? = nil, maxSodium: Double? = nil, minSugar: Double? = nil, maxSugar: Double? = nil, minZinc: Double? = nil, maxZinc: Double? = nil, offset: Int? = nil, number: Int? = nil, random: Bool? = nil, limitLicense: Bool? = nil) -> RequestBuilder<Set<SearchRecipesByNutrients200ResponseInner>> {
        let localVariablePath = "/recipes/findByNutrients"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "minCarbs": (wrappedValue: minCarbs?.encodeToJSON(), isExplode: false),
            "maxCarbs": (wrappedValue: maxCarbs?.encodeToJSON(), isExplode: false),
            "minProtein": (wrappedValue: minProtein?.encodeToJSON(), isExplode: false),
            "maxProtein": (wrappedValue: maxProtein?.encodeToJSON(), isExplode: false),
            "minCalories": (wrappedValue: minCalories?.encodeToJSON(), isExplode: false),
            "maxCalories": (wrappedValue: maxCalories?.encodeToJSON(), isExplode: false),
            "minFat": (wrappedValue: minFat?.encodeToJSON(), isExplode: false),
            "maxFat": (wrappedValue: maxFat?.encodeToJSON(), isExplode: false),
            "minAlcohol": (wrappedValue: minAlcohol?.encodeToJSON(), isExplode: false),
            "maxAlcohol": (wrappedValue: maxAlcohol?.encodeToJSON(), isExplode: false),
            "minCaffeine": (wrappedValue: minCaffeine?.encodeToJSON(), isExplode: false),
            "maxCaffeine": (wrappedValue: maxCaffeine?.encodeToJSON(), isExplode: false),
            "minCopper": (wrappedValue: minCopper?.encodeToJSON(), isExplode: false),
            "maxCopper": (wrappedValue: maxCopper?.encodeToJSON(), isExplode: false),
            "minCalcium": (wrappedValue: minCalcium?.encodeToJSON(), isExplode: false),
            "maxCalcium": (wrappedValue: maxCalcium?.encodeToJSON(), isExplode: false),
            "minCholine": (wrappedValue: minCholine?.encodeToJSON(), isExplode: false),
            "maxCholine": (wrappedValue: maxCholine?.encodeToJSON(), isExplode: false),
            "minCholesterol": (wrappedValue: minCholesterol?.encodeToJSON(), isExplode: false),
            "maxCholesterol": (wrappedValue: maxCholesterol?.encodeToJSON(), isExplode: false),
            "minFluoride": (wrappedValue: minFluoride?.encodeToJSON(), isExplode: false),
            "maxFluoride": (wrappedValue: maxFluoride?.encodeToJSON(), isExplode: false),
            "minSaturatedFat": (wrappedValue: minSaturatedFat?.encodeToJSON(), isExplode: false),
            "maxSaturatedFat": (wrappedValue: maxSaturatedFat?.encodeToJSON(), isExplode: false),
            "minVitaminA": (wrappedValue: minVitaminA?.encodeToJSON(), isExplode: false),
            "maxVitaminA": (wrappedValue: maxVitaminA?.encodeToJSON(), isExplode: false),
            "minVitaminC": (wrappedValue: minVitaminC?.encodeToJSON(), isExplode: false),
            "maxVitaminC": (wrappedValue: maxVitaminC?.encodeToJSON(), isExplode: false),
            "minVitaminD": (wrappedValue: minVitaminD?.encodeToJSON(), isExplode: false),
            "maxVitaminD": (wrappedValue: maxVitaminD?.encodeToJSON(), isExplode: false),
            "minVitaminE": (wrappedValue: minVitaminE?.encodeToJSON(), isExplode: false),
            "maxVitaminE": (wrappedValue: maxVitaminE?.encodeToJSON(), isExplode: false),
            "minVitaminK": (wrappedValue: minVitaminK?.encodeToJSON(), isExplode: false),
            "maxVitaminK": (wrappedValue: maxVitaminK?.encodeToJSON(), isExplode: false),
            "minVitaminB1": (wrappedValue: minVitaminB1?.encodeToJSON(), isExplode: false),
            "maxVitaminB1": (wrappedValue: maxVitaminB1?.encodeToJSON(), isExplode: false),
            "minVitaminB2": (wrappedValue: minVitaminB2?.encodeToJSON(), isExplode: false),
            "maxVitaminB2": (wrappedValue: maxVitaminB2?.encodeToJSON(), isExplode: false),
            "minVitaminB5": (wrappedValue: minVitaminB5?.encodeToJSON(), isExplode: false),
            "maxVitaminB5": (wrappedValue: maxVitaminB5?.encodeToJSON(), isExplode: false),
            "minVitaminB3": (wrappedValue: minVitaminB3?.encodeToJSON(), isExplode: false),
            "maxVitaminB3": (wrappedValue: maxVitaminB3?.encodeToJSON(), isExplode: false),
            "minVitaminB6": (wrappedValue: minVitaminB6?.encodeToJSON(), isExplode: false),
            "maxVitaminB6": (wrappedValue: maxVitaminB6?.encodeToJSON(), isExplode: false),
            "minVitaminB12": (wrappedValue: minVitaminB12?.encodeToJSON(), isExplode: false),
            "maxVitaminB12": (wrappedValue: maxVitaminB12?.encodeToJSON(), isExplode: false),
            "minFiber": (wrappedValue: minFiber?.encodeToJSON(), isExplode: false),
            "maxFiber": (wrappedValue: maxFiber?.encodeToJSON(), isExplode: false),
            "minFolate": (wrappedValue: minFolate?.encodeToJSON(), isExplode: false),
            "maxFolate": (wrappedValue: maxFolate?.encodeToJSON(), isExplode: false),
            "minFolicAcid": (wrappedValue: minFolicAcid?.encodeToJSON(), isExplode: false),
            "maxFolicAcid": (wrappedValue: maxFolicAcid?.encodeToJSON(), isExplode: false),
            "minIodine": (wrappedValue: minIodine?.encodeToJSON(), isExplode: false),
            "maxIodine": (wrappedValue: maxIodine?.encodeToJSON(), isExplode: false),
            "minIron": (wrappedValue: minIron?.encodeToJSON(), isExplode: false),
            "maxIron": (wrappedValue: maxIron?.encodeToJSON(), isExplode: false),
            "minMagnesium": (wrappedValue: minMagnesium?.encodeToJSON(), isExplode: false),
            "maxMagnesium": (wrappedValue: maxMagnesium?.encodeToJSON(), isExplode: false),
            "minManganese": (wrappedValue: minManganese?.encodeToJSON(), isExplode: false),
            "maxManganese": (wrappedValue: maxManganese?.encodeToJSON(), isExplode: false),
            "minPhosphorus": (wrappedValue: minPhosphorus?.encodeToJSON(), isExplode: false),
            "maxPhosphorus": (wrappedValue: maxPhosphorus?.encodeToJSON(), isExplode: false),
            "minPotassium": (wrappedValue: minPotassium?.encodeToJSON(), isExplode: false),
            "maxPotassium": (wrappedValue: maxPotassium?.encodeToJSON(), isExplode: false),
            "minSelenium": (wrappedValue: minSelenium?.encodeToJSON(), isExplode: false),
            "maxSelenium": (wrappedValue: maxSelenium?.encodeToJSON(), isExplode: false),
            "minSodium": (wrappedValue: minSodium?.encodeToJSON(), isExplode: false),
            "maxSodium": (wrappedValue: maxSodium?.encodeToJSON(), isExplode: false),
            "minSugar": (wrappedValue: minSugar?.encodeToJSON(), isExplode: false),
            "maxSugar": (wrappedValue: maxSugar?.encodeToJSON(), isExplode: false),
            "minZinc": (wrappedValue: minZinc?.encodeToJSON(), isExplode: false),
            "maxZinc": (wrappedValue: maxZinc?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
            "number": (wrappedValue: number?.encodeToJSON(), isExplode: true),
            "random": (wrappedValue: random?.encodeToJSON(), isExplode: false),
            "limitLicense": (wrappedValue: limitLicense?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Set<SearchRecipesByNutrients200ResponseInner>>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Summarize Recipe
     
     - parameter id: (path) The item&#39;s id. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func summarizeRecipe(id: Int, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SummarizeRecipe200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return summarizeRecipeWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Summarize Recipe
     - GET /recipes/{id}/summary
     - Automatically generate a short description that summarizes key information about the recipe.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Summarize-Recipe
}
     - parameter id: (path) The item&#39;s id. 
     - returns: RequestBuilder<SummarizeRecipe200Response> 
     */
    open class func summarizeRecipeWithRequestBuilder(id: Int) -> RequestBuilder<SummarizeRecipe200Response> {
        var localVariablePath = "/recipes/{id}/summary"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SummarizeRecipe200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter contentType
     */
    public enum ContentType_visualizeEquipment: String, CaseIterable {
        case applicationSlashXWwwFormUrlencoded = "application/x-www-form-urlencoded"
        case applicationSlashJson = "application/json"
        case multipartSlashFormData = "multipart/form-data"
    }

    /**
     * enum for parameter accept
     */
    public enum Accept_visualizeEquipment: String, CaseIterable {
        case applicationSlashJson = "application/json"
        case textSlashHtml = "text/html"
        case mediaSlashStar = "media/*"
    }

    /**
     Equipment Widget
     
     - parameter contentType: (header) The content type. (optional)
     - parameter accept: (header) Accept header. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func visualizeEquipment(contentType: ContentType_visualizeEquipment? = nil, accept: Accept_visualizeEquipment? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return visualizeEquipmentWithRequestBuilder(contentType: contentType, accept: accept).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Equipment Widget
     - POST /recipes/visualizeEquipment
     - Visualize the equipment used to make a recipe.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Equipment-Widget
}
     - parameter contentType: (header) The content type. (optional)
     - parameter accept: (header) Accept header. (optional)
     - returns: RequestBuilder<String> 
     */
    open class func visualizeEquipmentWithRequestBuilder(contentType: ContentType_visualizeEquipment? = nil, accept: Accept_visualizeEquipment? = nil) -> RequestBuilder<String> {
        let localVariablePath = "/recipes/visualizeEquipment"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
            "Content-Type": contentType?.encodeToJSON(),
            "Accept": accept?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter contentType
     */
    public enum ContentType_visualizePriceBreakdown: String, CaseIterable {
        case applicationSlashXWwwFormUrlencoded = "application/x-www-form-urlencoded"
        case applicationSlashJson = "application/json"
        case multipartSlashFormData = "multipart/form-data"
    }

    /**
     * enum for parameter accept
     */
    public enum Accept_visualizePriceBreakdown: String, CaseIterable {
        case applicationSlashJson = "application/json"
        case textSlashHtml = "text/html"
        case mediaSlashStar = "media/*"
    }

    /**
     * enum for parameter language
     */
    public enum Language_visualizePriceBreakdown: String, CaseIterable {
        case en = "en"
        case de = "de"
    }

    /**
     Price Breakdown Widget
     
     - parameter contentType: (header) The content type. (optional)
     - parameter accept: (header) Accept header. (optional)
     - parameter language: (query) The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func visualizePriceBreakdown(contentType: ContentType_visualizePriceBreakdown? = nil, accept: Accept_visualizePriceBreakdown? = nil, language: Language_visualizePriceBreakdown? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return visualizePriceBreakdownWithRequestBuilder(contentType: contentType, accept: accept, language: language).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Price Breakdown Widget
     - POST /recipes/visualizePriceEstimator
     - Visualize the price breakdown of a recipe.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Price-Breakdown-Widget
}
     - parameter contentType: (header) The content type. (optional)
     - parameter accept: (header) Accept header. (optional)
     - parameter language: (query) The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     - returns: RequestBuilder<String> 
     */
    open class func visualizePriceBreakdownWithRequestBuilder(contentType: ContentType_visualizePriceBreakdown? = nil, accept: Accept_visualizePriceBreakdown? = nil, language: Language_visualizePriceBreakdown? = nil) -> RequestBuilder<String> {
        let localVariablePath = "/recipes/visualizePriceEstimator"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "language": (wrappedValue: language?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
            "Content-Type": contentType?.encodeToJSON(),
            "Accept": accept?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Equipment by ID Widget
     
     - parameter id: (path) The item&#39;s id. 
     - parameter defaultCss: (query) Whether the default CSS should be added to the response. (optional, default to true)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func visualizeRecipeEquipmentByID(id: Int, defaultCss: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return visualizeRecipeEquipmentByIDWithRequestBuilder(id: id, defaultCss: defaultCss).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Equipment by ID Widget
     - GET /recipes/{id}/equipmentWidget
     - Visualize a recipe's equipment list.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Equipment-by-ID-Widget
}
     - parameter id: (path) The item&#39;s id. 
     - parameter defaultCss: (query) Whether the default CSS should be added to the response. (optional, default to true)
     - returns: RequestBuilder<String> 
     */
    open class func visualizeRecipeEquipmentByIDWithRequestBuilder(id: Int, defaultCss: Bool? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/recipes/{id}/equipmentWidget"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "defaultCss": (wrappedValue: defaultCss?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter measure
     */
    public enum Measure_visualizeRecipeIngredientsByID: String, CaseIterable {
        case us = "us"
        case metric = "metric"
    }

    /**
     Ingredients by ID Widget
     
     - parameter id: (path) The item&#39;s id. 
     - parameter defaultCss: (query) Whether the default CSS should be added to the response. (optional, default to true)
     - parameter measure: (query) Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func visualizeRecipeIngredientsByID(id: Int, defaultCss: Bool? = nil, measure: Measure_visualizeRecipeIngredientsByID? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return visualizeRecipeIngredientsByIDWithRequestBuilder(id: id, defaultCss: defaultCss, measure: measure).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Ingredients by ID Widget
     - GET /recipes/{id}/ingredientWidget
     - Visualize a recipe's ingredient list.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Ingredients-by-ID-Widget
}
     - parameter id: (path) The item&#39;s id. 
     - parameter defaultCss: (query) Whether the default CSS should be added to the response. (optional, default to true)
     - parameter measure: (query) Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
     - returns: RequestBuilder<String> 
     */
    open class func visualizeRecipeIngredientsByIDWithRequestBuilder(id: Int, defaultCss: Bool? = nil, measure: Measure_visualizeRecipeIngredientsByID? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/recipes/{id}/ingredientWidget"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "defaultCss": (wrappedValue: defaultCss?.encodeToJSON(), isExplode: true),
            "measure": (wrappedValue: measure?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter contentType
     */
    public enum ContentType_visualizeRecipeNutrition: String, CaseIterable {
        case applicationSlashXWwwFormUrlencoded = "application/x-www-form-urlencoded"
        case applicationSlashJson = "application/json"
        case multipartSlashFormData = "multipart/form-data"
    }

    /**
     * enum for parameter accept
     */
    public enum Accept_visualizeRecipeNutrition: String, CaseIterable {
        case applicationSlashJson = "application/json"
        case textSlashHtml = "text/html"
        case mediaSlashStar = "media/*"
    }

    /**
     * enum for parameter language
     */
    public enum Language_visualizeRecipeNutrition: String, CaseIterable {
        case en = "en"
        case de = "de"
    }

    /**
     Recipe Nutrition Widget
     
     - parameter contentType: (header) The content type. (optional)
     - parameter accept: (header) Accept header. (optional)
     - parameter language: (query) The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func visualizeRecipeNutrition(contentType: ContentType_visualizeRecipeNutrition? = nil, accept: Accept_visualizeRecipeNutrition? = nil, language: Language_visualizeRecipeNutrition? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return visualizeRecipeNutritionWithRequestBuilder(contentType: contentType, accept: accept, language: language).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Recipe Nutrition Widget
     - POST /recipes/visualizeNutrition
     - Visualize a recipe's nutritional information as HTML including CSS.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Recipe-Nutrition-Widget
}
     - parameter contentType: (header) The content type. (optional)
     - parameter accept: (header) Accept header. (optional)
     - parameter language: (query) The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     - returns: RequestBuilder<String> 
     */
    open class func visualizeRecipeNutritionWithRequestBuilder(contentType: ContentType_visualizeRecipeNutrition? = nil, accept: Accept_visualizeRecipeNutrition? = nil, language: Language_visualizeRecipeNutrition? = nil) -> RequestBuilder<String> {
        let localVariablePath = "/recipes/visualizeNutrition"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "language": (wrappedValue: language?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
            "Content-Type": contentType?.encodeToJSON(),
            "Accept": accept?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter accept
     */
    public enum Accept_visualizeRecipeNutritionByID: String, CaseIterable {
        case applicationSlashJson = "application/json"
        case textSlashHtml = "text/html"
        case mediaSlashStar = "media/*"
    }

    /**
     Recipe Nutrition by ID Widget
     
     - parameter id: (path) The item&#39;s id. 
     - parameter defaultCss: (query) Whether the default CSS should be added to the response. (optional, default to true)
     - parameter accept: (header) Accept header. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func visualizeRecipeNutritionByID(id: Int, defaultCss: Bool? = nil, accept: Accept_visualizeRecipeNutritionByID? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return visualizeRecipeNutritionByIDWithRequestBuilder(id: id, defaultCss: defaultCss, accept: accept).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Recipe Nutrition by ID Widget
     - GET /recipes/{id}/nutritionWidget
     - Visualize a recipe's nutritional information as HTML including CSS.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Recipe-Nutrition-by-ID-Widget
}
     - parameter id: (path) The item&#39;s id. 
     - parameter defaultCss: (query) Whether the default CSS should be added to the response. (optional, default to true)
     - parameter accept: (header) Accept header. (optional)
     - returns: RequestBuilder<String> 
     */
    open class func visualizeRecipeNutritionByIDWithRequestBuilder(id: Int, defaultCss: Bool? = nil, accept: Accept_visualizeRecipeNutritionByID? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/recipes/{id}/nutritionWidget"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "defaultCss": (wrappedValue: defaultCss?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Accept": accept?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Price Breakdown by ID Widget
     
     - parameter id: (path) The item&#39;s id. 
     - parameter defaultCss: (query) Whether the default CSS should be added to the response. (optional, default to true)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func visualizeRecipePriceBreakdownByID(id: Int, defaultCss: Bool? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return visualizeRecipePriceBreakdownByIDWithRequestBuilder(id: id, defaultCss: defaultCss).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Price Breakdown by ID Widget
     - GET /recipes/{id}/priceBreakdownWidget
     - Visualize a recipe's price breakdown.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Price-Breakdown-by-ID-Widget
}
     - parameter id: (path) The item&#39;s id. 
     - parameter defaultCss: (query) Whether the default CSS should be added to the response. (optional, default to true)
     - returns: RequestBuilder<String> 
     */
    open class func visualizeRecipePriceBreakdownByIDWithRequestBuilder(id: Int, defaultCss: Bool? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/recipes/{id}/priceBreakdownWidget"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "defaultCss": (wrappedValue: defaultCss?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter language
     */
    public enum Language_visualizeRecipeTaste: String, CaseIterable {
        case en = "en"
        case de = "de"
    }

    /**
     * enum for parameter contentType
     */
    public enum ContentType_visualizeRecipeTaste: String, CaseIterable {
        case applicationSlashXWwwFormUrlencoded = "application/x-www-form-urlencoded"
        case applicationSlashJson = "application/json"
        case multipartSlashFormData = "multipart/form-data"
    }

    /**
     * enum for parameter accept
     */
    public enum Accept_visualizeRecipeTaste: String, CaseIterable {
        case applicationSlashJson = "application/json"
        case textSlashHtml = "text/html"
        case mediaSlashStar = "media/*"
    }

    /**
     Recipe Taste Widget
     
     - parameter language: (query) The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     - parameter contentType: (header) The content type. (optional)
     - parameter accept: (header) Accept header. (optional)
     - parameter normalize: (query) Whether to normalize to the strongest taste. (optional)
     - parameter rgb: (query) Red, green, blue values for the chart color. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func visualizeRecipeTaste(language: Language_visualizeRecipeTaste? = nil, contentType: ContentType_visualizeRecipeTaste? = nil, accept: Accept_visualizeRecipeTaste? = nil, normalize: Bool? = nil, rgb: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return visualizeRecipeTasteWithRequestBuilder(language: language, contentType: contentType, accept: accept, normalize: normalize, rgb: rgb).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Recipe Taste Widget
     - POST /recipes/visualizeTaste
     - Visualize a recipe's taste information as HTML including CSS. You can play around with that endpoint!
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Recipe-Taste-Widget
}
     - parameter language: (query) The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     - parameter contentType: (header) The content type. (optional)
     - parameter accept: (header) Accept header. (optional)
     - parameter normalize: (query) Whether to normalize to the strongest taste. (optional)
     - parameter rgb: (query) Red, green, blue values for the chart color. (optional)
     - returns: RequestBuilder<String> 
     */
    open class func visualizeRecipeTasteWithRequestBuilder(language: Language_visualizeRecipeTaste? = nil, contentType: ContentType_visualizeRecipeTaste? = nil, accept: Accept_visualizeRecipeTaste? = nil, normalize: Bool? = nil, rgb: String? = nil) -> RequestBuilder<String> {
        let localVariablePath = "/recipes/visualizeTaste"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "language": (wrappedValue: language?.encodeToJSON(), isExplode: true),
            "normalize": (wrappedValue: normalize?.encodeToJSON(), isExplode: true),
            "rgb": (wrappedValue: rgb?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
            "Content-Type": contentType?.encodeToJSON(),
            "Accept": accept?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Recipe Taste by ID Widget
     
     - parameter id: (path) The item&#39;s id. 
     - parameter normalize: (query) Whether to normalize to the strongest taste. (optional, default to true)
     - parameter rgb: (query) Red, green, blue values for the chart color. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func visualizeRecipeTasteByID(id: Int, normalize: Bool? = nil, rgb: String? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return visualizeRecipeTasteByIDWithRequestBuilder(id: id, normalize: normalize, rgb: rgb).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Recipe Taste by ID Widget
     - GET /recipes/{id}/tasteWidget
     - Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Recipe-Taste-by-ID-Widget
}
     - parameter id: (path) The item&#39;s id. 
     - parameter normalize: (query) Whether to normalize to the strongest taste. (optional, default to true)
     - parameter rgb: (query) Red, green, blue values for the chart color. (optional)
     - returns: RequestBuilder<String> 
     */
    open class func visualizeRecipeTasteByIDWithRequestBuilder(id: Int, normalize: Bool? = nil, rgb: String? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/recipes/{id}/tasteWidget"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "normalize": (wrappedValue: normalize?.encodeToJSON(), isExplode: true),
            "rgb": (wrappedValue: rgb?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
