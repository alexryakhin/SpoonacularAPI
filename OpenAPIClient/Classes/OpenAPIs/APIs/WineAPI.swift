//
// WineAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class WineAPI {

    /**
     Dish Pairing for Wine
     
     - parameter wine: (query) The type of wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getDishPairingForWine(wine: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetDishPairingForWine200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getDishPairingForWineWithRequestBuilder(wine: wine).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Dish Pairing for Wine
     - GET /food/wine/dishes
     - Find a dish that goes well with a given wine.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Dish-Pairing-for-Wine
}
     - parameter wine: (query) The type of wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;. 
     - returns: RequestBuilder<GetDishPairingForWine200Response> 
     */
    open class func getDishPairingForWineWithRequestBuilder(wine: String) -> RequestBuilder<GetDishPairingForWine200Response> {
        let localVariablePath = "/food/wine/dishes"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "wine": (wrappedValue: wine.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetDishPairingForWine200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Wine Description
     
     - parameter wine: (query) The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getWineDescription(wine: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetWineDescription200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getWineDescriptionWithRequestBuilder(wine: wine).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Wine Description
     - GET /food/wine/description
     - Get a simple description of a certain wine, e.g. \"malbec\", \"riesling\", or \"merlot\".
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Wine-Description
}
     - parameter wine: (query) The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;. 
     - returns: RequestBuilder<GetWineDescription200Response> 
     */
    open class func getWineDescriptionWithRequestBuilder(wine: String) -> RequestBuilder<GetWineDescription200Response> {
        let localVariablePath = "/food/wine/description"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "wine": (wrappedValue: wine.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetWineDescription200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Wine Pairing
     
     - parameter food: (query) The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;). 
     - parameter maxPrice: (query) The maximum price for the specific wine recommendation in USD. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getWinePairing(food: String, maxPrice: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetWinePairing200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getWinePairingWithRequestBuilder(food: food, maxPrice: maxPrice).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Wine Pairing
     - GET /food/wine/pairing
     - Find a wine that goes well with a food. Food can be a dish name (\"steak\"), an ingredient name (\"salmon\"), or a cuisine (\"italian\").
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Wine-Pairing
}
     - parameter food: (query) The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;). 
     - parameter maxPrice: (query) The maximum price for the specific wine recommendation in USD. (optional)
     - returns: RequestBuilder<GetWinePairing200Response> 
     */
    open class func getWinePairingWithRequestBuilder(food: String, maxPrice: Double? = nil) -> RequestBuilder<GetWinePairing200Response> {
        let localVariablePath = "/food/wine/pairing"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "food": (wrappedValue: food.encodeToJSON(), isExplode: false),
            "maxPrice": (wrappedValue: maxPrice?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetWinePairing200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Wine Recommendation
     
     - parameter wine: (query) The type of wine to get a specific product recommendation for. 
     - parameter maxPrice: (query) The maximum price for the specific wine recommendation in USD. (optional)
     - parameter minRating: (query) The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars. (optional)
     - parameter number: (query) The number of wine recommendations expected (between 1 and 100). (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getWineRecommendation(wine: String, maxPrice: Double? = nil, minRating: Double? = nil, number: Double? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetWineRecommendation200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getWineRecommendationWithRequestBuilder(wine: wine, maxPrice: maxPrice, minRating: minRating, number: number).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Wine Recommendation
     - GET /food/wine/recommendation
     - Get a specific wine recommendation (concrete product) for a given wine type, e.g. \"merlot\".
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Wine-Recommendation
}
     - parameter wine: (query) The type of wine to get a specific product recommendation for. 
     - parameter maxPrice: (query) The maximum price for the specific wine recommendation in USD. (optional)
     - parameter minRating: (query) The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars. (optional)
     - parameter number: (query) The number of wine recommendations expected (between 1 and 100). (optional, default to 10)
     - returns: RequestBuilder<GetWineRecommendation200Response> 
     */
    open class func getWineRecommendationWithRequestBuilder(wine: String, maxPrice: Double? = nil, minRating: Double? = nil, number: Double? = nil) -> RequestBuilder<GetWineRecommendation200Response> {
        let localVariablePath = "/food/wine/recommendation"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "wine": (wrappedValue: wine.encodeToJSON(), isExplode: false),
            "maxPrice": (wrappedValue: maxPrice?.encodeToJSON(), isExplode: false),
            "minRating": (wrappedValue: minRating?.encodeToJSON(), isExplode: false),
            "number": (wrappedValue: number?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetWineRecommendation200Response>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
