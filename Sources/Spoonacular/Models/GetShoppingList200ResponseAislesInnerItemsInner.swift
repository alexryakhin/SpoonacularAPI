//
// GetShoppingList200ResponseAislesInnerItemsInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GetShoppingList200ResponseAislesInnerItemsInner: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let aisleRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var id: Int
    public var name: String
    public var pantryItem: Bool
    public var aisle: String
    public var cost: Double
    public var ingredientId: Int
    public var measures: GetShoppingList200ResponseAislesInnerItemsInnerMeasures?

    public init(id: Int, name: String, pantryItem: Bool, aisle: String, cost: Double, ingredientId: Int, measures: GetShoppingList200ResponseAislesInnerItemsInnerMeasures? = nil) {
        self.id = id
        self.name = name
        self.pantryItem = pantryItem
        self.aisle = aisle
        self.cost = cost
        self.ingredientId = ingredientId
        self.measures = measures
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case pantryItem
        case aisle
        case cost
        case ingredientId
        case measures
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encode(pantryItem, forKey: .pantryItem)
        try container.encode(aisle, forKey: .aisle)
        try container.encode(cost, forKey: .cost)
        try container.encode(ingredientId, forKey: .ingredientId)
        try container.encodeIfPresent(measures, forKey: .measures)
    }
}

