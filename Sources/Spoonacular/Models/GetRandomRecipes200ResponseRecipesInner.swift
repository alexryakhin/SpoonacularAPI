//
// GetRandomRecipes200ResponseRecipesInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GetRandomRecipes200ResponseRecipesInner: Codable, JSONEncodable, Hashable {

    static let titleRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let imageRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let imageTypeRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let licenseRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let sourceNameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let sourceUrlRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let spoonacularSourceUrlRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let creditsTextRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let gapsRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let summaryRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var id: Int
    public var title: String
    public var image: String
    public var imageType: String
    public var servings: Double
    public var readyInMinutes: Int
    public var license: String
    public var sourceName: String
    public var sourceUrl: String
    public var spoonacularSourceUrl: String
    public var aggregateLikes: Double
    public var healthScore: Double
    public var spoonacularScore: Double
    public var pricePerServing: Double
    public var cheap: Bool
    public var creditsText: String
    public var dairyFree: Bool
    public var gaps: String
    public var glutenFree: Bool
    public var instructions: String
    public var ketogenic: Bool
    public var lowFodmap: Bool
    public var sustainable: Bool
    public var vegan: Bool
    public var vegetarian: Bool
    public var veryHealthy: Bool
    public var veryPopular: Bool
    public var whole30: Bool
    public var weightWatcherSmartPoints: Double
    public var summary: String
    public var analyzedInstructions: [AnyCodable]?
    public var cuisines: [String]?
    public var diets: [String]?
    public var occasions: [String]?
    public var dishTypes: [String]?
    public var extendedIngredients: Set<GetRecipeInformation200ResponseExtendedIngredientsInner>?
    public var winePairing: GetRecipeInformation200ResponseWinePairing?

    public init(id: Int, title: String, image: String, imageType: String, servings: Double, readyInMinutes: Int, license: String, sourceName: String, sourceUrl: String, spoonacularSourceUrl: String, aggregateLikes: Double, healthScore: Double, spoonacularScore: Double, pricePerServing: Double, cheap: Bool, creditsText: String, dairyFree: Bool, gaps: String, glutenFree: Bool, instructions: String, ketogenic: Bool, lowFodmap: Bool, sustainable: Bool, vegan: Bool, vegetarian: Bool, veryHealthy: Bool, veryPopular: Bool, whole30: Bool, weightWatcherSmartPoints: Double, summary: String, analyzedInstructions: [AnyCodable]? = nil, cuisines: [String]? = nil, diets: [String]? = nil, occasions: [String]? = nil, dishTypes: [String]? = nil, extendedIngredients: Set<GetRecipeInformation200ResponseExtendedIngredientsInner>? = nil, winePairing: GetRecipeInformation200ResponseWinePairing? = nil) {
        self.id = id
        self.title = title
        self.image = image
        self.imageType = imageType
        self.servings = servings
        self.readyInMinutes = readyInMinutes
        self.license = license
        self.sourceName = sourceName
        self.sourceUrl = sourceUrl
        self.spoonacularSourceUrl = spoonacularSourceUrl
        self.aggregateLikes = aggregateLikes
        self.healthScore = healthScore
        self.spoonacularScore = spoonacularScore
        self.pricePerServing = pricePerServing
        self.cheap = cheap
        self.creditsText = creditsText
        self.dairyFree = dairyFree
        self.gaps = gaps
        self.glutenFree = glutenFree
        self.instructions = instructions
        self.ketogenic = ketogenic
        self.lowFodmap = lowFodmap
        self.sustainable = sustainable
        self.vegan = vegan
        self.vegetarian = vegetarian
        self.veryHealthy = veryHealthy
        self.veryPopular = veryPopular
        self.whole30 = whole30
        self.weightWatcherSmartPoints = weightWatcherSmartPoints
        self.summary = summary
        self.analyzedInstructions = analyzedInstructions
        self.cuisines = cuisines
        self.diets = diets
        self.occasions = occasions
        self.dishTypes = dishTypes
        self.extendedIngredients = extendedIngredients
        self.winePairing = winePairing
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case title
        case image
        case imageType
        case servings
        case readyInMinutes
        case license
        case sourceName
        case sourceUrl
        case spoonacularSourceUrl
        case aggregateLikes
        case healthScore
        case spoonacularScore
        case pricePerServing
        case cheap
        case creditsText
        case dairyFree
        case gaps
        case glutenFree
        case instructions
        case ketogenic
        case lowFodmap
        case sustainable
        case vegan
        case vegetarian
        case veryHealthy
        case veryPopular
        case whole30
        case weightWatcherSmartPoints
        case summary
        case analyzedInstructions
        case cuisines
        case diets
        case occasions
        case dishTypes
        case extendedIngredients
        case winePairing
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(title, forKey: .title)
        try container.encode(image, forKey: .image)
        try container.encode(imageType, forKey: .imageType)
        try container.encode(servings, forKey: .servings)
        try container.encode(readyInMinutes, forKey: .readyInMinutes)
        try container.encode(license, forKey: .license)
        try container.encode(sourceName, forKey: .sourceName)
        try container.encode(sourceUrl, forKey: .sourceUrl)
        try container.encode(spoonacularSourceUrl, forKey: .spoonacularSourceUrl)
        try container.encode(aggregateLikes, forKey: .aggregateLikes)
        try container.encode(healthScore, forKey: .healthScore)
        try container.encode(spoonacularScore, forKey: .spoonacularScore)
        try container.encode(pricePerServing, forKey: .pricePerServing)
        try container.encode(cheap, forKey: .cheap)
        try container.encode(creditsText, forKey: .creditsText)
        try container.encode(dairyFree, forKey: .dairyFree)
        try container.encode(gaps, forKey: .gaps)
        try container.encode(glutenFree, forKey: .glutenFree)
        try container.encode(instructions, forKey: .instructions)
        try container.encode(ketogenic, forKey: .ketogenic)
        try container.encode(lowFodmap, forKey: .lowFodmap)
        try container.encode(sustainable, forKey: .sustainable)
        try container.encode(vegan, forKey: .vegan)
        try container.encode(vegetarian, forKey: .vegetarian)
        try container.encode(veryHealthy, forKey: .veryHealthy)
        try container.encode(veryPopular, forKey: .veryPopular)
        try container.encode(whole30, forKey: .whole30)
        try container.encode(weightWatcherSmartPoints, forKey: .weightWatcherSmartPoints)
        try container.encode(summary, forKey: .summary)
        try container.encodeIfPresent(analyzedInstructions, forKey: .analyzedInstructions)
        try container.encodeIfPresent(cuisines, forKey: .cuisines)
        try container.encodeIfPresent(diets, forKey: .diets)
        try container.encodeIfPresent(occasions, forKey: .occasions)
        try container.encodeIfPresent(dishTypes, forKey: .dishTypes)
        try container.encodeIfPresent(extendedIngredients, forKey: .extendedIngredients)
        try container.encodeIfPresent(winePairing, forKey: .winePairing)
    }
}

