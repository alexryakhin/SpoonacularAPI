//
// GetRecipeInformation200ResponseExtendedIngredientsInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GetRecipeInformation200ResponseExtendedIngredientsInner: Codable, JSONEncodable, Hashable {

    static let aisleRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let consitencyRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let imageRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let nameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let originalRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let originalNameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let unitRule = StringRule(minLength: 0, maxLength: nil, pattern: nil)
    public var aisle: String
    public var amount: Double
    public var consitency: String
    public var id: Int
    public var image: String
    public var name: String
    public var original: String
    public var originalName: String
    public var unit: String
    public var measures: GetRecipeInformation200ResponseExtendedIngredientsInnerMeasures?
    public var meta: [String]?

    public init(aisle: String, amount: Double, consitency: String, id: Int, image: String, name: String, original: String, originalName: String, unit: String, measures: GetRecipeInformation200ResponseExtendedIngredientsInnerMeasures? = nil, meta: [String]? = nil) {
        self.aisle = aisle
        self.amount = amount
        self.consitency = consitency
        self.id = id
        self.image = image
        self.name = name
        self.original = original
        self.originalName = originalName
        self.unit = unit
        self.measures = measures
        self.meta = meta
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case aisle
        case amount
        case consitency
        case id
        case image
        case name
        case original
        case originalName
        case unit
        case measures
        case meta
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(aisle, forKey: .aisle)
        try container.encode(amount, forKey: .amount)
        try container.encode(consitency, forKey: .consitency)
        try container.encode(id, forKey: .id)
        try container.encode(image, forKey: .image)
        try container.encode(name, forKey: .name)
        try container.encode(original, forKey: .original)
        try container.encode(originalName, forKey: .originalName)
        try container.encode(unit, forKey: .unit)
        try container.encodeIfPresent(measures, forKey: .measures)
        try container.encodeIfPresent(meta, forKey: .meta)
    }
}

