//
// MenuItemsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MenuItemsAPI {

    /**
     Autocomplete Menu Item Search
     
     - parameter query: (query) The (partial) search query. 
     - parameter number: (query) The number of results to return (between 1 and 25). (optional)
     - returns: AutocompleteMenuItemSearch200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func autocompleteMenuItemSearch(query: String, number: Double? = nil) async throws -> AutocompleteMenuItemSearch200Response {
        return try await autocompleteMenuItemSearchWithRequestBuilder(query: query, number: number).execute().body
    }

    /**
     Autocomplete Menu Item Search
     - GET /food/menuItems/suggest
     - Generate suggestions for menu items based on a (partial) query. The matches will be found by looking in the title only.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Autocomplete-Menu-Item-Search
}
     - parameter query: (query) The (partial) search query. 
     - parameter number: (query) The number of results to return (between 1 and 25). (optional)
     - returns: RequestBuilder<AutocompleteMenuItemSearch200Response> 
     */
    open class func autocompleteMenuItemSearchWithRequestBuilder(query: String, number: Double? = nil) -> RequestBuilder<AutocompleteMenuItemSearch200Response> {
        let localVariablePath = "/food/menuItems/suggest"
        let localVariableURLString = SpoonacularAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": (wrappedValue: query.encodeToJSON(), isExplode: false),
            "number": (wrappedValue: number?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AutocompleteMenuItemSearch200Response>.Type = SpoonacularAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Menu Item Information
     
     - parameter id: (path) The item&#39;s id. 
     - returns: GetMenuItemInformation200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getMenuItemInformation(id: Int) async throws -> GetMenuItemInformation200Response {
        return try await getMenuItemInformationWithRequestBuilder(id: id).execute().body
    }

    /**
     Get Menu Item Information
     - GET /food/menuItems/{id}
     - Use a menu item id to get all available information about a menu item, such as nutrition.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Get-Menu-Item-Information
}
     - parameter id: (path) The item&#39;s id. 
     - returns: RequestBuilder<GetMenuItemInformation200Response> 
     */
    open class func getMenuItemInformationWithRequestBuilder(id: Int) -> RequestBuilder<GetMenuItemInformation200Response> {
        var localVariablePath = "/food/menuItems/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpoonacularAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetMenuItemInformation200Response>.Type = SpoonacularAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Menu Item Nutrition by ID Image
     
     - parameter id: (path) The menu item id. 
     - returns: AnyCodable
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func menuItemNutritionByIDImage(id: Double) async throws -> AnyCodable {
        return try await menuItemNutritionByIDImageWithRequestBuilder(id: id).execute().body
    }

    /**
     Menu Item Nutrition by ID Image
     - GET /food/menuItems/{id}/nutritionWidget.png
     - Visualize a menu item's nutritional information as HTML including CSS.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Menu-Item-Nutrition-by-ID-Image
}
     - parameter id: (path) The menu item id. 
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func menuItemNutritionByIDImageWithRequestBuilder(id: Double) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/food/menuItems/{id}/nutritionWidget.png"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpoonacularAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = SpoonacularAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Menu Item Nutrition Label Image
     
     - parameter id: (path) The menu item id. 
     - parameter showOptionalNutrients: (query) Whether to show optional nutrients. (optional)
     - parameter showZeroValues: (query) Whether to show zero values. (optional)
     - parameter showIngredients: (query) Whether to show a list of ingredients. (optional)
     - returns: AnyCodable
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func menuItemNutritionLabelImage(id: Double, showOptionalNutrients: Bool? = nil, showZeroValues: Bool? = nil, showIngredients: Bool? = nil) async throws -> AnyCodable {
        return try await menuItemNutritionLabelImageWithRequestBuilder(id: id, showOptionalNutrients: showOptionalNutrients, showZeroValues: showZeroValues, showIngredients: showIngredients).execute().body
    }

    /**
     Menu Item Nutrition Label Image
     - GET /food/menuItems/{id}/nutritionLabel.png
     - Visualize a menu item's nutritional label information as an image.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Menu-Item-Nutrition-Label-Image
}
     - parameter id: (path) The menu item id. 
     - parameter showOptionalNutrients: (query) Whether to show optional nutrients. (optional)
     - parameter showZeroValues: (query) Whether to show zero values. (optional)
     - parameter showIngredients: (query) Whether to show a list of ingredients. (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func menuItemNutritionLabelImageWithRequestBuilder(id: Double, showOptionalNutrients: Bool? = nil, showZeroValues: Bool? = nil, showIngredients: Bool? = nil) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/food/menuItems/{id}/nutritionLabel.png"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpoonacularAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "showOptionalNutrients": (wrappedValue: showOptionalNutrients?.encodeToJSON(), isExplode: false),
            "showZeroValues": (wrappedValue: showZeroValues?.encodeToJSON(), isExplode: false),
            "showIngredients": (wrappedValue: showIngredients?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = SpoonacularAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Menu Item Nutrition Label Widget
     
     - parameter id: (path) The menu item id. 
     - parameter defaultCss: (query) Whether the default CSS should be added to the response. (optional, default to true)
     - parameter showOptionalNutrients: (query) Whether to show optional nutrients. (optional)
     - parameter showZeroValues: (query) Whether to show zero values. (optional)
     - parameter showIngredients: (query) Whether to show a list of ingredients. (optional)
     - returns: String
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func menuItemNutritionLabelWidget(id: Double, defaultCss: Bool? = nil, showOptionalNutrients: Bool? = nil, showZeroValues: Bool? = nil, showIngredients: Bool? = nil) async throws -> String {
        return try await menuItemNutritionLabelWidgetWithRequestBuilder(id: id, defaultCss: defaultCss, showOptionalNutrients: showOptionalNutrients, showZeroValues: showZeroValues, showIngredients: showIngredients).execute().body
    }

    /**
     Menu Item Nutrition Label Widget
     - GET /food/menuItems/{id}/nutritionLabel
     - Visualize a menu item's nutritional label information as HTML including CSS.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Menu-Item-Nutrition-Label-Widget
}
     - parameter id: (path) The menu item id. 
     - parameter defaultCss: (query) Whether the default CSS should be added to the response. (optional, default to true)
     - parameter showOptionalNutrients: (query) Whether to show optional nutrients. (optional)
     - parameter showZeroValues: (query) Whether to show zero values. (optional)
     - parameter showIngredients: (query) Whether to show a list of ingredients. (optional)
     - returns: RequestBuilder<String> 
     */
    open class func menuItemNutritionLabelWidgetWithRequestBuilder(id: Double, defaultCss: Bool? = nil, showOptionalNutrients: Bool? = nil, showZeroValues: Bool? = nil, showIngredients: Bool? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/food/menuItems/{id}/nutritionLabel"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpoonacularAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "defaultCss": (wrappedValue: defaultCss?.encodeToJSON(), isExplode: true),
            "showOptionalNutrients": (wrappedValue: showOptionalNutrients?.encodeToJSON(), isExplode: false),
            "showZeroValues": (wrappedValue: showZeroValues?.encodeToJSON(), isExplode: false),
            "showIngredients": (wrappedValue: showIngredients?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = SpoonacularAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Search Menu Items
     
     - parameter query: (query) The (natural language) search query. (optional)
     - parameter minCalories: (query) The minimum amount of calories the menu item must have. (optional)
     - parameter maxCalories: (query) The maximum amount of calories the menu item can have. (optional)
     - parameter minCarbs: (query) The minimum amount of carbohydrates in grams the menu item must have. (optional)
     - parameter maxCarbs: (query) The maximum amount of carbohydrates in grams the menu item can have. (optional)
     - parameter minProtein: (query) The minimum amount of protein in grams the menu item must have. (optional)
     - parameter maxProtein: (query) The maximum amount of protein in grams the menu item can have. (optional)
     - parameter minFat: (query) The minimum amount of fat in grams the menu item must have. (optional)
     - parameter maxFat: (query) The maximum amount of fat in grams the menu item can have. (optional)
     - parameter addMenuItemInformation: (query) If set to true, you get more information about the menu items returned. (optional)
     - parameter offset: (query) The number of results to skip (between 0 and 900). (optional)
     - parameter number: (query) The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     - returns: SearchMenuItems200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func searchMenuItems(query: String? = nil, minCalories: Double? = nil, maxCalories: Double? = nil, minCarbs: Double? = nil, maxCarbs: Double? = nil, minProtein: Double? = nil, maxProtein: Double? = nil, minFat: Double? = nil, maxFat: Double? = nil, addMenuItemInformation: Bool? = nil, offset: Int? = nil, number: Int? = nil) async throws -> SearchMenuItems200Response {
        return try await searchMenuItemsWithRequestBuilder(query: query, minCalories: minCalories, maxCalories: maxCalories, minCarbs: minCarbs, maxCarbs: maxCarbs, minProtein: minProtein, maxProtein: maxProtein, minFat: minFat, maxFat: maxFat, addMenuItemInformation: addMenuItemInformation, offset: offset, number: number).execute().body
    }

    /**
     Search Menu Items
     - GET /food/menuItems/search
     - Search over 115,000 menu items from over 800 fast food and chain restaurants. For example, McDonald's Big Mac or Starbucks Mocha.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Search-Menu-Items
}
     - parameter query: (query) The (natural language) search query. (optional)
     - parameter minCalories: (query) The minimum amount of calories the menu item must have. (optional)
     - parameter maxCalories: (query) The maximum amount of calories the menu item can have. (optional)
     - parameter minCarbs: (query) The minimum amount of carbohydrates in grams the menu item must have. (optional)
     - parameter maxCarbs: (query) The maximum amount of carbohydrates in grams the menu item can have. (optional)
     - parameter minProtein: (query) The minimum amount of protein in grams the menu item must have. (optional)
     - parameter maxProtein: (query) The maximum amount of protein in grams the menu item can have. (optional)
     - parameter minFat: (query) The minimum amount of fat in grams the menu item must have. (optional)
     - parameter maxFat: (query) The maximum amount of fat in grams the menu item can have. (optional)
     - parameter addMenuItemInformation: (query) If set to true, you get more information about the menu items returned. (optional)
     - parameter offset: (query) The number of results to skip (between 0 and 900). (optional)
     - parameter number: (query) The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     - returns: RequestBuilder<SearchMenuItems200Response> 
     */
    open class func searchMenuItemsWithRequestBuilder(query: String? = nil, minCalories: Double? = nil, maxCalories: Double? = nil, minCarbs: Double? = nil, maxCarbs: Double? = nil, minProtein: Double? = nil, maxProtein: Double? = nil, minFat: Double? = nil, maxFat: Double? = nil, addMenuItemInformation: Bool? = nil, offset: Int? = nil, number: Int? = nil) -> RequestBuilder<SearchMenuItems200Response> {
        let localVariablePath = "/food/menuItems/search"
        let localVariableURLString = SpoonacularAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": (wrappedValue: query?.encodeToJSON(), isExplode: true),
            "minCalories": (wrappedValue: minCalories?.encodeToJSON(), isExplode: false),
            "maxCalories": (wrappedValue: maxCalories?.encodeToJSON(), isExplode: false),
            "minCarbs": (wrappedValue: minCarbs?.encodeToJSON(), isExplode: false),
            "maxCarbs": (wrappedValue: maxCarbs?.encodeToJSON(), isExplode: false),
            "minProtein": (wrappedValue: minProtein?.encodeToJSON(), isExplode: false),
            "maxProtein": (wrappedValue: maxProtein?.encodeToJSON(), isExplode: false),
            "minFat": (wrappedValue: minFat?.encodeToJSON(), isExplode: false),
            "maxFat": (wrappedValue: maxFat?.encodeToJSON(), isExplode: false),
            "addMenuItemInformation": (wrappedValue: addMenuItemInformation?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
            "number": (wrappedValue: number?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchMenuItems200Response>.Type = SpoonacularAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter accept
     */
    public enum Accept_visualizeMenuItemNutritionByID: String, CaseIterable {
        case applicationSlashJson = "application/json"
        case textSlashHtml = "text/html"
        case mediaSlashStar = "media/*"
    }

    /**
     Menu Item Nutrition by ID Widget
     
     - parameter id: (path) The item&#39;s id. 
     - parameter defaultCss: (query) Whether the default CSS should be added to the response. (optional, default to true)
     - parameter accept: (header) Accept header. (optional)
     - returns: String
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func visualizeMenuItemNutritionByID(id: Int, defaultCss: Bool? = nil, accept: Accept_visualizeMenuItemNutritionByID? = nil) async throws -> String {
        return try await visualizeMenuItemNutritionByIDWithRequestBuilder(id: id, defaultCss: defaultCss, accept: accept).execute().body
    }

    /**
     Menu Item Nutrition by ID Widget
     - GET /food/menuItems/{id}/nutritionWidget
     - Visualize a menu item's nutritional information as HTML including CSS.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Menu-Item-Nutrition-by-ID-Widget
}
     - parameter id: (path) The item&#39;s id. 
     - parameter defaultCss: (query) Whether the default CSS should be added to the response. (optional, default to true)
     - parameter accept: (header) Accept header. (optional)
     - returns: RequestBuilder<String> 
     */
    open class func visualizeMenuItemNutritionByIDWithRequestBuilder(id: Int, defaultCss: Bool? = nil, accept: Accept_visualizeMenuItemNutritionByID? = nil) -> RequestBuilder<String> {
        var localVariablePath = "/food/menuItems/{id}/nutritionWidget"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpoonacularAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "defaultCss": (wrappedValue: defaultCss?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Accept": accept?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = SpoonacularAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
