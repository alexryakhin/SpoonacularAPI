//
// IngredientsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class IngredientsAPI {

    /**
     * enum for parameter language
     */
    public enum Language_autocompleteIngredientSearch: String, CaseIterable {
        case en = "en"
        case de = "de"
    }

    /**
     Autocomplete Ingredient Search
     
     - parameter query: (query) The (natural language) search query. (optional)
     - parameter number: (query) The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     - parameter metaInformation: (query) Whether to return more meta information about the ingredients. (optional)
     - parameter intolerances: (query) A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     - parameter language: (query) The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     - returns: Set<AutocompleteIngredientSearch200ResponseInner>
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func autocompleteIngredientSearch(query: String? = nil, number: Int? = nil, metaInformation: Bool? = nil, intolerances: String? = nil, language: Language_autocompleteIngredientSearch? = nil) async throws -> Set<AutocompleteIngredientSearch200ResponseInner> {
        return try await autocompleteIngredientSearchWithRequestBuilder(query: query, number: number, metaInformation: metaInformation, intolerances: intolerances, language: language).execute().body
    }

    /**
     Autocomplete Ingredient Search
     - GET /food/ingredients/autocomplete
     - Autocomplete the entry of an ingredient.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Autocomplete-Ingredient-Search
}
     - parameter query: (query) The (natural language) search query. (optional)
     - parameter number: (query) The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     - parameter metaInformation: (query) Whether to return more meta information about the ingredients. (optional)
     - parameter intolerances: (query) A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     - parameter language: (query) The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     - returns: RequestBuilder<Set<AutocompleteIngredientSearch200ResponseInner>> 
     */
    open class func autocompleteIngredientSearchWithRequestBuilder(query: String? = nil, number: Int? = nil, metaInformation: Bool? = nil, intolerances: String? = nil, language: Language_autocompleteIngredientSearch? = nil) -> RequestBuilder<Set<AutocompleteIngredientSearch200ResponseInner>> {
        let localVariablePath = "/food/ingredients/autocomplete"
        let localVariableURLString = SpoonacularAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": (wrappedValue: query?.encodeToJSON(), isExplode: true),
            "number": (wrappedValue: number?.encodeToJSON(), isExplode: true),
            "metaInformation": (wrappedValue: metaInformation?.encodeToJSON(), isExplode: false),
            "intolerances": (wrappedValue: intolerances?.encodeToJSON(), isExplode: false),
            "language": (wrappedValue: language?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Set<AutocompleteIngredientSearch200ResponseInner>>.Type = SpoonacularAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Compute Ingredient Amount
     
     - parameter id: (path) The id of the ingredient you want the amount for. 
     - parameter nutrient: (query) The target nutrient. See a list of supported nutrients. 
     - parameter target: (query) The target number of the given nutrient. 
     - parameter unit: (query) The target unit. (optional)
     - returns: ComputeIngredientAmount200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func computeIngredientAmount(id: Double, nutrient: String, target: Double, unit: String? = nil) async throws -> ComputeIngredientAmount200Response {
        return try await computeIngredientAmountWithRequestBuilder(id: id, nutrient: nutrient, target: target, unit: unit).execute().body
    }

    /**
     Compute Ingredient Amount
     - GET /food/ingredients/{id}/amount
     - Compute the amount you need of a certain ingredient for a certain nutritional goal. For example, how much pineapple do you have to eat to get 10 grams of protein?
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Compute-Ingredient-Amount
}
     - parameter id: (path) The id of the ingredient you want the amount for. 
     - parameter nutrient: (query) The target nutrient. See a list of supported nutrients. 
     - parameter target: (query) The target number of the given nutrient. 
     - parameter unit: (query) The target unit. (optional)
     - returns: RequestBuilder<ComputeIngredientAmount200Response> 
     */
    open class func computeIngredientAmountWithRequestBuilder(id: Double, nutrient: String, target: Double, unit: String? = nil) -> RequestBuilder<ComputeIngredientAmount200Response> {
        var localVariablePath = "/food/ingredients/{id}/amount"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpoonacularAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "nutrient": (wrappedValue: nutrient.encodeToJSON(), isExplode: false),
            "target": (wrappedValue: target.encodeToJSON(), isExplode: false),
            "unit": (wrappedValue: unit?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ComputeIngredientAmount200Response>.Type = SpoonacularAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Ingredient Information
     
     - parameter id: (path) The item&#39;s id. 
     - parameter amount: (query) The amount of this ingredient. (optional)
     - parameter unit: (query) The unit for the given amount. (optional)
     - returns: GetIngredientInformation200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getIngredientInformation(id: Int, amount: Double? = nil, unit: String? = nil) async throws -> GetIngredientInformation200Response {
        return try await getIngredientInformationWithRequestBuilder(id: id, amount: amount, unit: unit).execute().body
    }

    /**
     Get Ingredient Information
     - GET /food/ingredients/{id}/information
     - Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Get-Ingredient-Information
}
     - parameter id: (path) The item&#39;s id. 
     - parameter amount: (query) The amount of this ingredient. (optional)
     - parameter unit: (query) The unit for the given amount. (optional)
     - returns: RequestBuilder<GetIngredientInformation200Response> 
     */
    open class func getIngredientInformationWithRequestBuilder(id: Int, amount: Double? = nil, unit: String? = nil) -> RequestBuilder<GetIngredientInformation200Response> {
        var localVariablePath = "/food/ingredients/{id}/information"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpoonacularAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "amount": (wrappedValue: amount?.encodeToJSON(), isExplode: false),
            "unit": (wrappedValue: unit?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetIngredientInformation200Response>.Type = SpoonacularAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Ingredient Substitutes
     
     - parameter ingredientName: (query) The name of the ingredient you want to replace. 
     - returns: GetIngredientSubstitutes200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getIngredientSubstitutes(ingredientName: String) async throws -> GetIngredientSubstitutes200Response {
        return try await getIngredientSubstitutesWithRequestBuilder(ingredientName: ingredientName).execute().body
    }

    /**
     Get Ingredient Substitutes
     - GET /food/ingredients/substitutes
     - Search for substitutes for a given ingredient.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Get-Ingredient-Substitutes
}
     - parameter ingredientName: (query) The name of the ingredient you want to replace. 
     - returns: RequestBuilder<GetIngredientSubstitutes200Response> 
     */
    open class func getIngredientSubstitutesWithRequestBuilder(ingredientName: String) -> RequestBuilder<GetIngredientSubstitutes200Response> {
        let localVariablePath = "/food/ingredients/substitutes"
        let localVariableURLString = SpoonacularAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ingredientName": (wrappedValue: ingredientName.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetIngredientSubstitutes200Response>.Type = SpoonacularAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Ingredient Substitutes by ID
     
     - parameter id: (path) The item&#39;s id. 
     - returns: GetIngredientSubstitutes200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getIngredientSubstitutesByID(id: Int) async throws -> GetIngredientSubstitutes200Response {
        return try await getIngredientSubstitutesByIDWithRequestBuilder(id: id).execute().body
    }

    /**
     Get Ingredient Substitutes by ID
     - GET /food/ingredients/{id}/substitutes
     - Search for substitutes for a given ingredient.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Get-Ingredient-Substitutes-by-ID
}
     - parameter id: (path) The item&#39;s id. 
     - returns: RequestBuilder<GetIngredientSubstitutes200Response> 
     */
    open class func getIngredientSubstitutesByIDWithRequestBuilder(id: Int) -> RequestBuilder<GetIngredientSubstitutes200Response> {
        var localVariablePath = "/food/ingredients/{id}/substitutes"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpoonacularAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetIngredientSubstitutes200Response>.Type = SpoonacularAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter language
     */
    public enum Language_ingredientSearch: String, CaseIterable {
        case en = "en"
        case de = "de"
    }

    /**
     Ingredient Search
     
     - parameter query: (query) The (natural language) search query. (optional)
     - parameter addChildren: (query) Whether to add children of found foods. (optional)
     - parameter minProteinPercent: (query) The minimum percentage of protein the food must have (between 0 and 100). (optional)
     - parameter maxProteinPercent: (query) The maximum percentage of protein the food can have (between 0 and 100). (optional)
     - parameter minFatPercent: (query) The minimum percentage of fat the food must have (between 0 and 100). (optional)
     - parameter maxFatPercent: (query) The maximum percentage of fat the food can have (between 0 and 100). (optional)
     - parameter minCarbsPercent: (query) The minimum percentage of carbs the food must have (between 0 and 100). (optional)
     - parameter maxCarbsPercent: (query) The maximum percentage of carbs the food can have (between 0 and 100). (optional)
     - parameter metaInformation: (query) Whether to return more meta information about the ingredients. (optional)
     - parameter intolerances: (query) A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     - parameter sort: (query) The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     - parameter sortDirection: (query) The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
     - parameter offset: (query) The number of results to skip (between 0 and 900). (optional)
     - parameter number: (query) The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     - parameter language: (query) The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     - returns: IngredientSearch200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ingredientSearch(query: String? = nil, addChildren: Bool? = nil, minProteinPercent: Double? = nil, maxProteinPercent: Double? = nil, minFatPercent: Double? = nil, maxFatPercent: Double? = nil, minCarbsPercent: Double? = nil, maxCarbsPercent: Double? = nil, metaInformation: Bool? = nil, intolerances: String? = nil, sort: String? = nil, sortDirection: String? = nil, offset: Int? = nil, number: Int? = nil, language: Language_ingredientSearch? = nil) async throws -> IngredientSearch200Response {
        return try await ingredientSearchWithRequestBuilder(query: query, addChildren: addChildren, minProteinPercent: minProteinPercent, maxProteinPercent: maxProteinPercent, minFatPercent: minFatPercent, maxFatPercent: maxFatPercent, minCarbsPercent: minCarbsPercent, maxCarbsPercent: maxCarbsPercent, metaInformation: metaInformation, intolerances: intolerances, sort: sort, sortDirection: sortDirection, offset: offset, number: number, language: language).execute().body
    }

    /**
     Ingredient Search
     - GET /food/ingredients/search
     - Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Ingredient-Search
}
     - parameter query: (query) The (natural language) search query. (optional)
     - parameter addChildren: (query) Whether to add children of found foods. (optional)
     - parameter minProteinPercent: (query) The minimum percentage of protein the food must have (between 0 and 100). (optional)
     - parameter maxProteinPercent: (query) The maximum percentage of protein the food can have (between 0 and 100). (optional)
     - parameter minFatPercent: (query) The minimum percentage of fat the food must have (between 0 and 100). (optional)
     - parameter maxFatPercent: (query) The maximum percentage of fat the food can have (between 0 and 100). (optional)
     - parameter minCarbsPercent: (query) The minimum percentage of carbs the food must have (between 0 and 100). (optional)
     - parameter maxCarbsPercent: (query) The maximum percentage of carbs the food can have (between 0 and 100). (optional)
     - parameter metaInformation: (query) Whether to return more meta information about the ingredients. (optional)
     - parameter intolerances: (query) A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     - parameter sort: (query) The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     - parameter sortDirection: (query) The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
     - parameter offset: (query) The number of results to skip (between 0 and 900). (optional)
     - parameter number: (query) The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     - parameter language: (query) The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     - returns: RequestBuilder<IngredientSearch200Response> 
     */
    open class func ingredientSearchWithRequestBuilder(query: String? = nil, addChildren: Bool? = nil, minProteinPercent: Double? = nil, maxProteinPercent: Double? = nil, minFatPercent: Double? = nil, maxFatPercent: Double? = nil, minCarbsPercent: Double? = nil, maxCarbsPercent: Double? = nil, metaInformation: Bool? = nil, intolerances: String? = nil, sort: String? = nil, sortDirection: String? = nil, offset: Int? = nil, number: Int? = nil, language: Language_ingredientSearch? = nil) -> RequestBuilder<IngredientSearch200Response> {
        let localVariablePath = "/food/ingredients/search"
        let localVariableURLString = SpoonacularAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": (wrappedValue: query?.encodeToJSON(), isExplode: true),
            "addChildren": (wrappedValue: addChildren?.encodeToJSON(), isExplode: false),
            "minProteinPercent": (wrappedValue: minProteinPercent?.encodeToJSON(), isExplode: false),
            "maxProteinPercent": (wrappedValue: maxProteinPercent?.encodeToJSON(), isExplode: false),
            "minFatPercent": (wrappedValue: minFatPercent?.encodeToJSON(), isExplode: false),
            "maxFatPercent": (wrappedValue: maxFatPercent?.encodeToJSON(), isExplode: false),
            "minCarbsPercent": (wrappedValue: minCarbsPercent?.encodeToJSON(), isExplode: false),
            "maxCarbsPercent": (wrappedValue: maxCarbsPercent?.encodeToJSON(), isExplode: false),
            "metaInformation": (wrappedValue: metaInformation?.encodeToJSON(), isExplode: false),
            "intolerances": (wrappedValue: intolerances?.encodeToJSON(), isExplode: false),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: false),
            "sortDirection": (wrappedValue: sortDirection?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
            "number": (wrappedValue: number?.encodeToJSON(), isExplode: true),
            "language": (wrappedValue: language?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<IngredientSearch200Response>.Type = SpoonacularAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter measure
     */
    public enum Measure_ingredientsByIDImage: String, CaseIterable {
        case us = "us"
        case metric = "metric"
    }

    /**
     Ingredients by ID Image
     
     - parameter id: (path) The recipe id. 
     - parameter measure: (query) Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
     - returns: AnyCodable
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ingredientsByIDImage(id: Double, measure: Measure_ingredientsByIDImage? = nil) async throws -> AnyCodable {
        return try await ingredientsByIDImageWithRequestBuilder(id: id, measure: measure).execute().body
    }

    /**
     Ingredients by ID Image
     - GET /recipes/{id}/ingredientWidget.png
     - Visualize a recipe's ingredient list.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Ingredients-by-ID-Image
}
     - parameter id: (path) The recipe id. 
     - parameter measure: (query) Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func ingredientsByIDImageWithRequestBuilder(id: Double, measure: Measure_ingredientsByIDImage? = nil) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/recipes/{id}/ingredientWidget.png"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpoonacularAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "measure": (wrappedValue: measure?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = SpoonacularAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Map Ingredients to Grocery Products
     
     - parameter mapIngredientsToGroceryProductsRequest: (body)  
     - returns: Set<MapIngredientsToGroceryProducts200ResponseInner>
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func mapIngredientsToGroceryProducts(mapIngredientsToGroceryProductsRequest: MapIngredientsToGroceryProductsRequest) async throws -> Set<MapIngredientsToGroceryProducts200ResponseInner> {
        return try await mapIngredientsToGroceryProductsWithRequestBuilder(mapIngredientsToGroceryProductsRequest: mapIngredientsToGroceryProductsRequest).execute().body
    }

    /**
     Map Ingredients to Grocery Products
     - POST /food/ingredients/map
     - Map a set of ingredients to products you can buy in the grocery store.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Map-Ingredients-to-Grocery-Products
}
     - parameter mapIngredientsToGroceryProductsRequest: (body)  
     - returns: RequestBuilder<Set<MapIngredientsToGroceryProducts200ResponseInner>> 
     */
    open class func mapIngredientsToGroceryProductsWithRequestBuilder(mapIngredientsToGroceryProductsRequest: MapIngredientsToGroceryProductsRequest) -> RequestBuilder<Set<MapIngredientsToGroceryProducts200ResponseInner>> {
        let localVariablePath = "/food/ingredients/map"
        let localVariableURLString = SpoonacularAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mapIngredientsToGroceryProductsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Set<MapIngredientsToGroceryProducts200ResponseInner>>.Type = SpoonacularAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     * enum for parameter contentType
     */
    public enum ContentType_visualizeIngredients: String, CaseIterable {
        case applicationSlashXWwwFormUrlencoded = "application/x-www-form-urlencoded"
        case applicationSlashJson = "application/json"
        case multipartSlashFormData = "multipart/form-data"
    }

    /**
     * enum for parameter language
     */
    public enum Language_visualizeIngredients: String, CaseIterable {
        case en = "en"
        case de = "de"
    }

    /**
     * enum for parameter accept
     */
    public enum Accept_visualizeIngredients: String, CaseIterable {
        case applicationSlashJson = "application/json"
        case textSlashHtml = "text/html"
        case mediaSlashStar = "media/*"
    }

    /**
     Ingredients Widget
     
     - parameter contentType: (header) The content type. (optional)
     - parameter language: (query) The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     - parameter accept: (header) Accept header. (optional)
     - returns: String
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func visualizeIngredients(contentType: ContentType_visualizeIngredients? = nil, language: Language_visualizeIngredients? = nil, accept: Accept_visualizeIngredients? = nil) async throws -> String {
        return try await visualizeIngredientsWithRequestBuilder(contentType: contentType, language: language, accept: accept).execute().body
    }

    /**
     Ingredients Widget
     - POST /recipes/visualizeIngredients
     - Visualize ingredients of a recipe. You can play around with that endpoint!
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Ingredients-Widget
}
     - parameter contentType: (header) The content type. (optional)
     - parameter language: (query) The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     - parameter accept: (header) Accept header. (optional)
     - returns: RequestBuilder<String> 
     */
    open class func visualizeIngredientsWithRequestBuilder(contentType: ContentType_visualizeIngredients? = nil, language: Language_visualizeIngredients? = nil, accept: Accept_visualizeIngredients? = nil) -> RequestBuilder<String> {
        let localVariablePath = "/recipes/visualizeIngredients"
        let localVariableURLString = SpoonacularAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "language": (wrappedValue: language?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
            "Content-Type": contentType?.encodeToJSON(),
            "Accept": accept?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = SpoonacularAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
