//
// GetRecipeNutritionWidgetByID200Response.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/**  */
public struct GetRecipeNutritionWidgetByID200Response: Codable, JSONEncodable, Hashable {

    static let caloriesRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let carbsRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let fatRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let proteinRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var calories: String
    public var carbs: String
    public var fat: String
    public var protein: String
    public var bad: Set<GetRecipeNutritionWidgetByID200ResponseBadInner>
    public var good: Set<GetRecipeNutritionWidgetByID200ResponseGoodInner>

    public init(calories: String, carbs: String, fat: String, protein: String, bad: Set<GetRecipeNutritionWidgetByID200ResponseBadInner>, good: Set<GetRecipeNutritionWidgetByID200ResponseGoodInner>) {
        self.calories = calories
        self.carbs = carbs
        self.fat = fat
        self.protein = protein
        self.bad = bad
        self.good = good
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case calories
        case carbs
        case fat
        case protein
        case bad
        case good
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(calories, forKey: .calories)
        try container.encode(carbs, forKey: .carbs)
        try container.encode(fat, forKey: .fat)
        try container.encode(protein, forKey: .protein)
        try container.encode(bad, forKey: .bad)
        try container.encode(good, forKey: .good)
    }
}

