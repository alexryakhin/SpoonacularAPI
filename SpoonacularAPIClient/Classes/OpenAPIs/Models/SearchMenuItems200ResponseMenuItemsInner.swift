//
// SearchMenuItems200ResponseMenuItemsInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct SearchMenuItems200ResponseMenuItemsInner: Codable, JSONEncodable, Hashable {

    static let titleRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let restaurantChainRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let imageRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let imageTypeRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var id: Int
    public var title: String
    public var restaurantChain: String
    public var image: String
    public var imageType: String
    public var servings: SearchGroceryProductsByUPC200ResponseServings?

    public init(id: Int, title: String, restaurantChain: String, image: String, imageType: String, servings: SearchGroceryProductsByUPC200ResponseServings? = nil) {
        self.id = id
        self.title = title
        self.restaurantChain = restaurantChain
        self.image = image
        self.imageType = imageType
        self.servings = servings
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case title
        case restaurantChain
        case image
        case imageType
        case servings
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(title, forKey: .title)
        try container.encode(restaurantChain, forKey: .restaurantChain)
        try container.encode(image, forKey: .image)
        try container.encode(imageType, forKey: .imageType)
        try container.encodeIfPresent(servings, forKey: .servings)
    }
}

