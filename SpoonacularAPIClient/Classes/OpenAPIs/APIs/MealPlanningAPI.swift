//
// MealPlanningAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MealPlanningAPI {

    /**
     Add Meal Plan Template
     
     - parameter username: (path) The username. 
     - parameter hash: (query) The private hash for the username. 
     - parameter addToMealPlanRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func addMealPlanTemplate(username: String, hash: String, addToMealPlanRequest: AddToMealPlanRequest, apiResponseQueue: DispatchQueue = SpoonacularAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AddMealPlanTemplate200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return addMealPlanTemplateWithRequestBuilder(username: username, hash: hash, addToMealPlanRequest: addToMealPlanRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add Meal Plan Template
     - POST /mealplanner/{username}/templates
     - Add a meal plan template for a user.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Add-Meal-Plan-Template
}
     - parameter username: (path) The username. 
     - parameter hash: (query) The private hash for the username. 
     - parameter addToMealPlanRequest: (body)  
     - returns: RequestBuilder<AddMealPlanTemplate200Response> 
     */
    open class func addMealPlanTemplateWithRequestBuilder(username: String, hash: String, addToMealPlanRequest: AddToMealPlanRequest) -> RequestBuilder<AddMealPlanTemplate200Response> {
        var localVariablePath = "/mealplanner/{username}/templates"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let localVariableURLString = SpoonacularAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addToMealPlanRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "hash": (wrappedValue: hash.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AddMealPlanTemplate200Response>.Type = SpoonacularAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Add to Meal Plan
     
     - parameter username: (path) The username. 
     - parameter hash: (query) The private hash for the username. 
     - parameter addToMealPlanRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func addToMealPlan(username: String, hash: String, addToMealPlanRequest: AddToMealPlanRequest, apiResponseQueue: DispatchQueue = SpoonacularAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return addToMealPlanWithRequestBuilder(username: username, hash: hash, addToMealPlanRequest: addToMealPlanRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add to Meal Plan
     - POST /mealplanner/{username}/items
     - Add an item to the user's meal plan.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Add-to-Meal-Plan
}
     - parameter username: (path) The username. 
     - parameter hash: (query) The private hash for the username. 
     - parameter addToMealPlanRequest: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func addToMealPlanWithRequestBuilder(username: String, hash: String, addToMealPlanRequest: AddToMealPlanRequest) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/mealplanner/{username}/items"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let localVariableURLString = SpoonacularAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addToMealPlanRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "hash": (wrappedValue: hash.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = SpoonacularAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Add to Shopping List
     
     - parameter username: (path) The username. 
     - parameter hash: (query) The private hash for the username. 
     - parameter addToMealPlanRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func addToShoppingList(username: String, hash: String, addToMealPlanRequest: AddToMealPlanRequest, apiResponseQueue: DispatchQueue = SpoonacularAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GenerateShoppingList200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return addToShoppingListWithRequestBuilder(username: username, hash: hash, addToMealPlanRequest: addToMealPlanRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Add to Shopping List
     - POST /mealplanner/{username}/shopping-list/items
     - Add an item to the current shopping list of a user.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Add-to-Shopping-List
}
     - parameter username: (path) The username. 
     - parameter hash: (query) The private hash for the username. 
     - parameter addToMealPlanRequest: (body)  
     - returns: RequestBuilder<GenerateShoppingList200Response> 
     */
    open class func addToShoppingListWithRequestBuilder(username: String, hash: String, addToMealPlanRequest: AddToMealPlanRequest) -> RequestBuilder<GenerateShoppingList200Response> {
        var localVariablePath = "/mealplanner/{username}/shopping-list/items"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let localVariableURLString = SpoonacularAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addToMealPlanRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "hash": (wrappedValue: hash.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenerateShoppingList200Response>.Type = SpoonacularAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Clear Meal Plan Day
     
     - parameter username: (path) The username. 
     - parameter date: (path) The date in the format yyyy-mm-dd. 
     - parameter hash: (query) The private hash for the username. 
     - parameter clearMealPlanDayRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func clearMealPlanDay(username: String, date: String, hash: String, clearMealPlanDayRequest: ClearMealPlanDayRequest, apiResponseQueue: DispatchQueue = SpoonacularAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return clearMealPlanDayWithRequestBuilder(username: username, date: date, hash: hash, clearMealPlanDayRequest: clearMealPlanDayRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Clear Meal Plan Day
     - DELETE /mealplanner/{username}/day/{date}
     - Delete all planned items from the user's meal plan for a specific day.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Clear-Meal-Plan-Day
}
     - parameter username: (path) The username. 
     - parameter date: (path) The date in the format yyyy-mm-dd. 
     - parameter hash: (query) The private hash for the username. 
     - parameter clearMealPlanDayRequest: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func clearMealPlanDayWithRequestBuilder(username: String, date: String, hash: String, clearMealPlanDayRequest: ClearMealPlanDayRequest) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/mealplanner/{username}/day/{date}"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let datePreEscape = "\(APIHelper.mapValueToPathItem(date))"
        let datePostEscape = datePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{date}", with: datePostEscape, options: .literal, range: nil)
        let localVariableURLString = SpoonacularAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: clearMealPlanDayRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "hash": (wrappedValue: hash.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = SpoonacularAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Connect User
     
     - parameter body: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func connectUser(body: AnyCodable, apiResponseQueue: DispatchQueue = SpoonacularAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ConnectUser200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return connectUserWithRequestBuilder(body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Connect User
     - POST /users/connect
     - In order to call user-specific endpoints, you need to connect your app's users to spoonacular users.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Connect-User
}
     - parameter body: (body)  
     - returns: RequestBuilder<ConnectUser200Response> 
     */
    open class func connectUserWithRequestBuilder(body: AnyCodable) -> RequestBuilder<ConnectUser200Response> {
        let localVariablePath = "/users/connect"
        let localVariableURLString = SpoonacularAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ConnectUser200Response>.Type = SpoonacularAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete from Meal Plan
     
     - parameter username: (path) The username. 
     - parameter id: (path) The shopping list item id. 
     - parameter hash: (query) The private hash for the username. 
     - parameter deleteFromMealPlanRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteFromMealPlan(username: String, id: Double, hash: String, deleteFromMealPlanRequest: DeleteFromMealPlanRequest, apiResponseQueue: DispatchQueue = SpoonacularAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteFromMealPlanWithRequestBuilder(username: username, id: id, hash: hash, deleteFromMealPlanRequest: deleteFromMealPlanRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete from Meal Plan
     - DELETE /mealplanner/{username}/items/{id}
     - Delete an item from the user's meal plan.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Delete-from-Meal-Plan
}
     - parameter username: (path) The username. 
     - parameter id: (path) The shopping list item id. 
     - parameter hash: (query) The private hash for the username. 
     - parameter deleteFromMealPlanRequest: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func deleteFromMealPlanWithRequestBuilder(username: String, id: Double, hash: String, deleteFromMealPlanRequest: DeleteFromMealPlanRequest) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/mealplanner/{username}/items/{id}"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpoonacularAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deleteFromMealPlanRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "hash": (wrappedValue: hash.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = SpoonacularAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete from Shopping List
     
     - parameter username: (path) The username. 
     - parameter id: (path) The item&#39;s id. 
     - parameter hash: (query) The private hash for the username. 
     - parameter deleteFromMealPlanRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteFromShoppingList(username: String, id: Int, hash: String, deleteFromMealPlanRequest: DeleteFromMealPlanRequest, apiResponseQueue: DispatchQueue = SpoonacularAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteFromShoppingListWithRequestBuilder(username: username, id: id, hash: hash, deleteFromMealPlanRequest: deleteFromMealPlanRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete from Shopping List
     - DELETE /mealplanner/{username}/shopping-list/items/{id}
     - Delete an item from the current shopping list of the user.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Delete-from-Shopping-List
}
     - parameter username: (path) The username. 
     - parameter id: (path) The item&#39;s id. 
     - parameter hash: (query) The private hash for the username. 
     - parameter deleteFromMealPlanRequest: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func deleteFromShoppingListWithRequestBuilder(username: String, id: Int, hash: String, deleteFromMealPlanRequest: DeleteFromMealPlanRequest) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/mealplanner/{username}/shopping-list/items/{id}"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpoonacularAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deleteFromMealPlanRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "hash": (wrappedValue: hash.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = SpoonacularAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete Meal Plan Template
     
     - parameter username: (path) The username. 
     - parameter id: (path) The item&#39;s id. 
     - parameter hash: (query) The private hash for the username. 
     - parameter deleteFromMealPlanRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteMealPlanTemplate(username: String, id: Int, hash: String, deleteFromMealPlanRequest: DeleteFromMealPlanRequest, apiResponseQueue: DispatchQueue = SpoonacularAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: AnyCodable?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteMealPlanTemplateWithRequestBuilder(username: username, id: id, hash: hash, deleteFromMealPlanRequest: deleteFromMealPlanRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Meal Plan Template
     - DELETE /mealplanner/{username}/templates/{id}
     - Delete a meal plan template for a user.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Delete-Meal-Plan-Template
}
     - parameter username: (path) The username. 
     - parameter id: (path) The item&#39;s id. 
     - parameter hash: (query) The private hash for the username. 
     - parameter deleteFromMealPlanRequest: (body)  
     - returns: RequestBuilder<AnyCodable> 
     */
    open class func deleteMealPlanTemplateWithRequestBuilder(username: String, id: Int, hash: String, deleteFromMealPlanRequest: DeleteFromMealPlanRequest) -> RequestBuilder<AnyCodable> {
        var localVariablePath = "/mealplanner/{username}/templates/{id}"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpoonacularAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: deleteFromMealPlanRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "hash": (wrappedValue: hash.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = SpoonacularAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Generate Meal Plan
     
     - parameter timeFrame: (query) Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;. (optional)
     - parameter targetCalories: (query) What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal. (optional)
     - parameter diet: (query) Enter a diet that the meal plan has to adhere to. See a full list of supported diets. (optional)
     - parameter exclude: (query) A comma-separated list of allergens or ingredients that must be excluded. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func generateMealPlan(timeFrame: String? = nil, targetCalories: Double? = nil, diet: String? = nil, exclude: String? = nil, apiResponseQueue: DispatchQueue = SpoonacularAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GenerateMealPlan200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return generateMealPlanWithRequestBuilder(timeFrame: timeFrame, targetCalories: targetCalories, diet: diet, exclude: exclude).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Generate Meal Plan
     - GET /mealplanner/generate
     - Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Generate-Meal-Plan
}
     - parameter timeFrame: (query) Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;. (optional)
     - parameter targetCalories: (query) What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal. (optional)
     - parameter diet: (query) Enter a diet that the meal plan has to adhere to. See a full list of supported diets. (optional)
     - parameter exclude: (query) A comma-separated list of allergens or ingredients that must be excluded. (optional)
     - returns: RequestBuilder<GenerateMealPlan200Response> 
     */
    open class func generateMealPlanWithRequestBuilder(timeFrame: String? = nil, targetCalories: Double? = nil, diet: String? = nil, exclude: String? = nil) -> RequestBuilder<GenerateMealPlan200Response> {
        let localVariablePath = "/mealplanner/generate"
        let localVariableURLString = SpoonacularAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "timeFrame": (wrappedValue: timeFrame?.encodeToJSON(), isExplode: false),
            "targetCalories": (wrappedValue: targetCalories?.encodeToJSON(), isExplode: false),
            "diet": (wrappedValue: diet?.encodeToJSON(), isExplode: false),
            "exclude": (wrappedValue: exclude?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenerateMealPlan200Response>.Type = SpoonacularAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Generate Shopping List
     
     - parameter username: (path) The username. 
     - parameter startDate: (path) The start date in the format yyyy-mm-dd. 
     - parameter endDate: (path) The end date in the format yyyy-mm-dd. 
     - parameter hash: (query) The private hash for the username. 
     - parameter generateShoppingListRequest: (body)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func generateShoppingList(username: String, startDate: String, endDate: String, hash: String, generateShoppingListRequest: GenerateShoppingListRequest, apiResponseQueue: DispatchQueue = SpoonacularAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GenerateShoppingList200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return generateShoppingListWithRequestBuilder(username: username, startDate: startDate, endDate: endDate, hash: hash, generateShoppingListRequest: generateShoppingListRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Generate Shopping List
     - POST /mealplanner/{username}/shopping-list/{start-date}/{end-date}
     - Generate the shopping list for a user from the meal planner in a given time frame.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Generate-Shopping-List
}
     - parameter username: (path) The username. 
     - parameter startDate: (path) The start date in the format yyyy-mm-dd. 
     - parameter endDate: (path) The end date in the format yyyy-mm-dd. 
     - parameter hash: (query) The private hash for the username. 
     - parameter generateShoppingListRequest: (body)  
     - returns: RequestBuilder<GenerateShoppingList200Response> 
     */
    open class func generateShoppingListWithRequestBuilder(username: String, startDate: String, endDate: String, hash: String, generateShoppingListRequest: GenerateShoppingListRequest) -> RequestBuilder<GenerateShoppingList200Response> {
        var localVariablePath = "/mealplanner/{username}/shopping-list/{start-date}/{end-date}"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let startDatePreEscape = "\(APIHelper.mapValueToPathItem(startDate))"
        let startDatePostEscape = startDatePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{start-date}", with: startDatePostEscape, options: .literal, range: nil)
        let endDatePreEscape = "\(APIHelper.mapValueToPathItem(endDate))"
        let endDatePostEscape = endDatePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{end-date}", with: endDatePostEscape, options: .literal, range: nil)
        let localVariableURLString = SpoonacularAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: generateShoppingListRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "hash": (wrappedValue: hash.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GenerateShoppingList200Response>.Type = SpoonacularAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Meal Plan Template
     
     - parameter username: (path) The username. 
     - parameter id: (path) The item&#39;s id. 
     - parameter hash: (query) The private hash for the username. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMealPlanTemplate(username: String, id: Int, hash: String, apiResponseQueue: DispatchQueue = SpoonacularAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetMealPlanTemplate200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getMealPlanTemplateWithRequestBuilder(username: username, id: id, hash: hash).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Meal Plan Template
     - GET /mealplanner/{username}/templates/{id}
     - Get information about a meal plan template.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Get-Meal-Plan-Template
}
     - parameter username: (path) The username. 
     - parameter id: (path) The item&#39;s id. 
     - parameter hash: (query) The private hash for the username. 
     - returns: RequestBuilder<GetMealPlanTemplate200Response> 
     */
    open class func getMealPlanTemplateWithRequestBuilder(username: String, id: Int, hash: String) -> RequestBuilder<GetMealPlanTemplate200Response> {
        var localVariablePath = "/mealplanner/{username}/templates/{id}"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = SpoonacularAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "hash": (wrappedValue: hash.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetMealPlanTemplate200Response>.Type = SpoonacularAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Meal Plan Templates
     
     - parameter username: (path) The username. 
     - parameter hash: (query) The private hash for the username. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMealPlanTemplates(username: String, hash: String, apiResponseQueue: DispatchQueue = SpoonacularAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetMealPlanTemplates200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getMealPlanTemplatesWithRequestBuilder(username: username, hash: hash).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Meal Plan Templates
     - GET /mealplanner/{username}/templates
     - Get meal plan templates from user or public ones.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Get-Meal-Plan-Templates
}
     - parameter username: (path) The username. 
     - parameter hash: (query) The private hash for the username. 
     - returns: RequestBuilder<GetMealPlanTemplates200Response> 
     */
    open class func getMealPlanTemplatesWithRequestBuilder(username: String, hash: String) -> RequestBuilder<GetMealPlanTemplates200Response> {
        var localVariablePath = "/mealplanner/{username}/templates"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let localVariableURLString = SpoonacularAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "hash": (wrappedValue: hash.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetMealPlanTemplates200Response>.Type = SpoonacularAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Meal Plan Week
     
     - parameter username: (path) The username. 
     - parameter startDate: (path) The start date of the meal planned week in the format yyyy-mm-dd. 
     - parameter hash: (query) The private hash for the username. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getMealPlanWeek(username: String, startDate: String, hash: String, apiResponseQueue: DispatchQueue = SpoonacularAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetMealPlanWeek200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getMealPlanWeekWithRequestBuilder(username: username, startDate: startDate, hash: hash).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Meal Plan Week
     - GET /mealplanner/{username}/week/{start-date}
     - Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user's hash that can be found in his/her account.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Get-Meal-Plan-Week
}
     - parameter username: (path) The username. 
     - parameter startDate: (path) The start date of the meal planned week in the format yyyy-mm-dd. 
     - parameter hash: (query) The private hash for the username. 
     - returns: RequestBuilder<GetMealPlanWeek200Response> 
     */
    open class func getMealPlanWeekWithRequestBuilder(username: String, startDate: String, hash: String) -> RequestBuilder<GetMealPlanWeek200Response> {
        var localVariablePath = "/mealplanner/{username}/week/{start-date}"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let startDatePreEscape = "\(APIHelper.mapValueToPathItem(startDate))"
        let startDatePostEscape = startDatePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{start-date}", with: startDatePostEscape, options: .literal, range: nil)
        let localVariableURLString = SpoonacularAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "hash": (wrappedValue: hash.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetMealPlanWeek200Response>.Type = SpoonacularAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get Shopping List
     
     - parameter username: (path) The username. 
     - parameter hash: (query) The private hash for the username. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getShoppingList(username: String, hash: String, apiResponseQueue: DispatchQueue = SpoonacularAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetShoppingList200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getShoppingListWithRequestBuilder(username: username, hash: hash).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Shopping List
     - GET /mealplanner/{username}/shopping-list
     - Get the current shopping list for the given user.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Get-Shopping-List
}
     - parameter username: (path) The username. 
     - parameter hash: (query) The private hash for the username. 
     - returns: RequestBuilder<GetShoppingList200Response> 
     */
    open class func getShoppingListWithRequestBuilder(username: String, hash: String) -> RequestBuilder<GetShoppingList200Response> {
        var localVariablePath = "/mealplanner/{username}/shopping-list"
        let usernamePreEscape = "\(APIHelper.mapValueToPathItem(username))"
        let usernamePostEscape = usernamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{username}", with: usernamePostEscape, options: .literal, range: nil)
        let localVariableURLString = SpoonacularAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "hash": (wrappedValue: hash.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetShoppingList200Response>.Type = SpoonacularAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
