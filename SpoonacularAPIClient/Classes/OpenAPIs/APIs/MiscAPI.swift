//
// MiscAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class MiscAPI {

    /**
     * enum for parameter contentType
     */
    public enum ContentType_detectFoodInText: String, CaseIterable {
        case applicationSlashXWwwFormUrlencoded = "application/x-www-form-urlencoded"
        case applicationSlashJson = "application/json"
        case multipartSlashFormData = "multipart/form-data"
    }

    /**
     Detect Food in Text
     
     - parameter contentType: (header) The content type. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func detectFoodInText(contentType: ContentType_detectFoodInText? = nil, apiResponseQueue: DispatchQueue = SpoonacularAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: DetectFoodInText200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return detectFoodInTextWithRequestBuilder(contentType: contentType).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Detect Food in Text
     - POST /food/detect
     - Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Detect-Food-in-Text
}
     - parameter contentType: (header) The content type. (optional)
     - returns: RequestBuilder<DetectFoodInText200Response> 
     */
    open class func detectFoodInTextWithRequestBuilder(contentType: ContentType_detectFoodInText? = nil) -> RequestBuilder<DetectFoodInText200Response> {
        let localVariablePath = "/food/detect"
        let localVariableURLString = SpoonacularAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/x-www-form-urlencoded",
            "Content-Type": contentType?.encodeToJSON(),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DetectFoodInText200Response>.Type = SpoonacularAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Random Food Joke
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getARandomFoodJoke(apiResponseQueue: DispatchQueue = SpoonacularAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetARandomFoodJoke200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getARandomFoodJokeWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Random Food Joke
     - GET /food/jokes/random
     - Get a random joke that is related to food. Caution: this is an endpoint for adults!
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Random-Food-Joke
}
     - returns: RequestBuilder<GetARandomFoodJoke200Response> 
     */
    open class func getARandomFoodJokeWithRequestBuilder() -> RequestBuilder<GetARandomFoodJoke200Response> {
        let localVariablePath = "/food/jokes/random"
        let localVariableURLString = SpoonacularAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetARandomFoodJoke200Response>.Type = SpoonacularAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Conversation Suggests
     
     - parameter query: (query) A (partial) query from the user. The endpoint will return if it matches topics it can talk about. 
     - parameter number: (query) The number of suggestions to return (between 1 and 25). (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getConversationSuggests(query: String, number: Double? = nil, apiResponseQueue: DispatchQueue = SpoonacularAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetConversationSuggests200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getConversationSuggestsWithRequestBuilder(query: query, number: number).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Conversation Suggests
     - GET /food/converse/suggest
     - This endpoint returns suggestions for things the user can say or ask the chatbot.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Conversation-Suggests
}
     - parameter query: (query) A (partial) query from the user. The endpoint will return if it matches topics it can talk about. 
     - parameter number: (query) The number of suggestions to return (between 1 and 25). (optional)
     - returns: RequestBuilder<GetConversationSuggests200Response> 
     */
    open class func getConversationSuggestsWithRequestBuilder(query: String, number: Double? = nil) -> RequestBuilder<GetConversationSuggests200Response> {
        let localVariablePath = "/food/converse/suggest"
        let localVariableURLString = SpoonacularAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": (wrappedValue: query.encodeToJSON(), isExplode: false),
            "number": (wrappedValue: number?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetConversationSuggests200Response>.Type = SpoonacularAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Random Food Trivia
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getRandomFoodTrivia(apiResponseQueue: DispatchQueue = SpoonacularAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetRandomFoodTrivia200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getRandomFoodTriviaWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Random Food Trivia
     - GET /food/trivia/random
     - Returns random food trivia.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Random-Food-Trivia
}
     - returns: RequestBuilder<GetRandomFoodTrivia200Response> 
     */
    open class func getRandomFoodTriviaWithRequestBuilder() -> RequestBuilder<GetRandomFoodTrivia200Response> {
        let localVariablePath = "/food/trivia/random"
        let localVariableURLString = SpoonacularAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetRandomFoodTrivia200Response>.Type = SpoonacularAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Image Analysis by URL
     
     - parameter imageUrl: (query) The URL of the image to be analyzed. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func imageAnalysisByURL(imageUrl: String, apiResponseQueue: DispatchQueue = SpoonacularAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ImageAnalysisByURL200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return imageAnalysisByURLWithRequestBuilder(imageUrl: imageUrl).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Image Analysis by URL
     - GET /food/images/analyze
     - Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Image-Analysis-by-URL
}
     - parameter imageUrl: (query) The URL of the image to be analyzed. 
     - returns: RequestBuilder<ImageAnalysisByURL200Response> 
     */
    open class func imageAnalysisByURLWithRequestBuilder(imageUrl: String) -> RequestBuilder<ImageAnalysisByURL200Response> {
        let localVariablePath = "/food/images/analyze"
        let localVariableURLString = SpoonacularAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "imageUrl": (wrappedValue: imageUrl.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImageAnalysisByURL200Response>.Type = SpoonacularAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Image Classification by URL
     
     - parameter imageUrl: (query) The URL of the image to be classified. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func imageClassificationByURL(imageUrl: String, apiResponseQueue: DispatchQueue = SpoonacularAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ImageClassificationByURL200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return imageClassificationByURLWithRequestBuilder(imageUrl: imageUrl).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Image Classification by URL
     - GET /food/images/classify
     - Classify a food image.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Image-Classification-by-URL
}
     - parameter imageUrl: (query) The URL of the image to be classified. 
     - returns: RequestBuilder<ImageClassificationByURL200Response> 
     */
    open class func imageClassificationByURLWithRequestBuilder(imageUrl: String) -> RequestBuilder<ImageClassificationByURL200Response> {
        let localVariablePath = "/food/images/classify"
        let localVariableURLString = SpoonacularAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "imageUrl": (wrappedValue: imageUrl.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ImageClassificationByURL200Response>.Type = SpoonacularAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Search All Food
     
     - parameter query: (query) The search query. 
     - parameter offset: (query) The number of results to skip (between 0 and 900). (optional)
     - parameter number: (query) The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func searchAllFood(query: String, offset: Int? = nil, number: Int? = nil, apiResponseQueue: DispatchQueue = SpoonacularAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SearchAllFood200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return searchAllFoodWithRequestBuilder(query: query, offset: offset, number: number).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search All Food
     - GET /food/search
     - Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Search-All-Food
}
     - parameter query: (query) The search query. 
     - parameter offset: (query) The number of results to skip (between 0 and 900). (optional)
     - parameter number: (query) The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     - returns: RequestBuilder<SearchAllFood200Response> 
     */
    open class func searchAllFoodWithRequestBuilder(query: String, offset: Int? = nil, number: Int? = nil) -> RequestBuilder<SearchAllFood200Response> {
        let localVariablePath = "/food/search"
        let localVariableURLString = SpoonacularAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": (wrappedValue: query.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
            "number": (wrappedValue: number?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchAllFood200Response>.Type = SpoonacularAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Search Custom Foods
     
     - parameter username: (query) The username. 
     - parameter hash: (query) The private hash for the username. 
     - parameter query: (query) The (natural language) search query. (optional)
     - parameter offset: (query) The number of results to skip (between 0 and 900). (optional)
     - parameter number: (query) The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func searchCustomFoods(username: String, hash: String, query: String? = nil, offset: Int? = nil, number: Int? = nil, apiResponseQueue: DispatchQueue = SpoonacularAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SearchCustomFoods200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return searchCustomFoodsWithRequestBuilder(username: username, hash: hash, query: query, offset: offset, number: number).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search Custom Foods
     - GET /food/customFoods/search
     - Search custom foods in a user's account.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Search-Custom-Foods
}
     - parameter username: (query) The username. 
     - parameter hash: (query) The private hash for the username. 
     - parameter query: (query) The (natural language) search query. (optional)
     - parameter offset: (query) The number of results to skip (between 0 and 900). (optional)
     - parameter number: (query) The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     - returns: RequestBuilder<SearchCustomFoods200Response> 
     */
    open class func searchCustomFoodsWithRequestBuilder(username: String, hash: String, query: String? = nil, offset: Int? = nil, number: Int? = nil) -> RequestBuilder<SearchCustomFoods200Response> {
        let localVariablePath = "/food/customFoods/search"
        let localVariableURLString = SpoonacularAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": (wrappedValue: query?.encodeToJSON(), isExplode: true),
            "username": (wrappedValue: username.encodeToJSON(), isExplode: false),
            "hash": (wrappedValue: hash.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
            "number": (wrappedValue: number?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchCustomFoods200Response>.Type = SpoonacularAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Search Food Videos
     
     - parameter query: (query) The (natural language) search query. (optional)
     - parameter type: (query) The type of the recipes. See a full list of supported meal types. (optional)
     - parameter cuisine: (query) The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines. (optional)
     - parameter diet: (query) The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
     - parameter includeIngredients: (query) A comma-separated list of ingredients that the recipes should contain. (optional)
     - parameter excludeIngredients: (query) A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     - parameter minLength: (query) Minimum video length in seconds. (optional)
     - parameter maxLength: (query) Maximum video length in seconds. (optional)
     - parameter offset: (query) The number of results to skip (between 0 and 900). (optional)
     - parameter number: (query) The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func searchFoodVideos(query: String? = nil, type: String? = nil, cuisine: String? = nil, diet: String? = nil, includeIngredients: String? = nil, excludeIngredients: String? = nil, minLength: Double? = nil, maxLength: Double? = nil, offset: Int? = nil, number: Int? = nil, apiResponseQueue: DispatchQueue = SpoonacularAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SearchFoodVideos200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return searchFoodVideosWithRequestBuilder(query: query, type: type, cuisine: cuisine, diet: diet, includeIngredients: includeIngredients, excludeIngredients: excludeIngredients, minLength: minLength, maxLength: maxLength, offset: offset, number: number).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search Food Videos
     - GET /food/videos/search
     - Find recipe and other food related videos.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Search-Food-Videos
}
     - parameter query: (query) The (natural language) search query. (optional)
     - parameter type: (query) The type of the recipes. See a full list of supported meal types. (optional)
     - parameter cuisine: (query) The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines. (optional)
     - parameter diet: (query) The diet for which the recipes must be suitable. See a full list of supported diets. (optional)
     - parameter includeIngredients: (query) A comma-separated list of ingredients that the recipes should contain. (optional)
     - parameter excludeIngredients: (query) A comma-separated list of ingredients or ingredient types that the recipes must not contain. (optional)
     - parameter minLength: (query) Minimum video length in seconds. (optional)
     - parameter maxLength: (query) Maximum video length in seconds. (optional)
     - parameter offset: (query) The number of results to skip (between 0 and 900). (optional)
     - parameter number: (query) The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     - returns: RequestBuilder<SearchFoodVideos200Response> 
     */
    open class func searchFoodVideosWithRequestBuilder(query: String? = nil, type: String? = nil, cuisine: String? = nil, diet: String? = nil, includeIngredients: String? = nil, excludeIngredients: String? = nil, minLength: Double? = nil, maxLength: Double? = nil, offset: Int? = nil, number: Int? = nil) -> RequestBuilder<SearchFoodVideos200Response> {
        let localVariablePath = "/food/videos/search"
        let localVariableURLString = SpoonacularAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": (wrappedValue: query?.encodeToJSON(), isExplode: true),
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: false),
            "cuisine": (wrappedValue: cuisine?.encodeToJSON(), isExplode: false),
            "diet": (wrappedValue: diet?.encodeToJSON(), isExplode: false),
            "includeIngredients": (wrappedValue: includeIngredients?.encodeToJSON(), isExplode: false),
            "excludeIngredients": (wrappedValue: excludeIngredients?.encodeToJSON(), isExplode: false),
            "minLength": (wrappedValue: minLength?.encodeToJSON(), isExplode: false),
            "maxLength": (wrappedValue: maxLength?.encodeToJSON(), isExplode: false),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
            "number": (wrappedValue: number?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchFoodVideos200Response>.Type = SpoonacularAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Search Site Content
     
     - parameter query: (query) The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func searchSiteContent(query: String, apiResponseQueue: DispatchQueue = SpoonacularAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SearchSiteContent200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return searchSiteContentWithRequestBuilder(query: query).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Search Site Content
     - GET /food/site/search
     - Search spoonacular's site content. You'll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Search-Site-Content
}
     - parameter query: (query) The query to search for. You can also use partial queries such as \&quot;spagh\&quot; to already find spaghetti recipes, articles, grocery products, and other content. 
     - returns: RequestBuilder<SearchSiteContent200Response> 
     */
    open class func searchSiteContentWithRequestBuilder(query: String) -> RequestBuilder<SearchSiteContent200Response> {
        let localVariablePath = "/food/site/search"
        let localVariableURLString = SpoonacularAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "query": (wrappedValue: query.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SearchSiteContent200Response>.Type = SpoonacularAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Talk to Chatbot
     
     - parameter text: (query) The request / question / answer from the user to the chatbot. 
     - parameter contextId: (query) An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func talkToChatbot(text: String, contextId: String? = nil, apiResponseQueue: DispatchQueue = SpoonacularAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: TalkToChatbot200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return talkToChatbotWithRequestBuilder(text: text, contextId: contextId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Talk to Chatbot
     - GET /food/converse
     - This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \"Get Conversation Suggests\" endpoint to show your user what he or she can say.
     - API Key:
       - type: apiKey x-api-key (HEADER)
       - name: apiKeyScheme
     - externalDocs: class ExternalDocumentation {
    description: Read entire docs
    url: https://spoonacular.com/food-api/docs#Talk-to-Chatbot
}
     - parameter text: (query) The request / question / answer from the user to the chatbot. 
     - parameter contextId: (query) An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation. (optional)
     - returns: RequestBuilder<TalkToChatbot200Response> 
     */
    open class func talkToChatbotWithRequestBuilder(text: String, contextId: String? = nil) -> RequestBuilder<TalkToChatbot200Response> {
        let localVariablePath = "/food/converse"
        let localVariableURLString = SpoonacularAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "text": (wrappedValue: text.encodeToJSON(), isExplode: false),
            "contextId": (wrappedValue: contextId?.encodeToJSON(), isExplode: false),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TalkToChatbot200Response>.Type = SpoonacularAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
